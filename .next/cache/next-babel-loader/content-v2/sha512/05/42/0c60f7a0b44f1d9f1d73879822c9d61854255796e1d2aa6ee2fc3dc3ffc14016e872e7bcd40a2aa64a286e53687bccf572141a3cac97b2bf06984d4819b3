{"ast":null,"code":"const isElectron = require('is-electron');\n\nlet log;\n\nif (false) {// eslint-disable-next-line global-require\n} else if (isElectron()) {\n  log = global.log;\n}\n\nconst logger = () => {\n  if (isElectron()) {\n    log.transports.file.level = false ? 'warn' : 'debug';\n    log.transports.file.file = 'aglogger.log';\n    log.transports.file.maxSize = 15 * 1024 * 1024;\n    log.transports.file.streamConfig = {\n      encoding: 'utf8',\n      flags: 'a'\n    };\n    log.transports.console.level = false;\n    log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n  }\n\n  return log;\n};\n\nexport const error = async (filename, text) => {\n  await logger();\n\n  if (true && isElectron() !== false) {\n    log.error(`${filename}: ${text}`);\n  }\n};\nexport const warn = async (filename, text) => {\n  await logger();\n\n  if (true && isElectron() !== false) {\n    log.warn(`${filename}: ${text}`);\n  }\n};\nexport const info = async (filename, text) => {\n  await logger();\n\n  if (true && isElectron() !== false) {\n    log.info(`${filename}: ${text}`);\n  }\n};\nexport const debug = async (filename, text) => {\n  await logger();\n\n  if (true && isElectron() !== false) {\n    log.debug(`${filename}: ${text}`);\n  }\n};\nexport default logger; // switch (level) {\n//   case 'error':\n//     log.error(`${filename}: ${text}`);\n//     break;\n//   case 'warn':\n//     log.warn(`${filename}: ${text}`);\n//     break;\n//   case 'info':\n//     log.info(`${filename}: ${text}`);\n//     break;\n//   case 'debug':\n//     log.debug(`${filename}: ${text}`);\n//     break;\n//   default:\n//     log.warn(`${filename}: ${text}`);\n// }\n// }\n//   else {\n//     log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n//     log.transports.console.level = false;\n//     log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n//   }","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/logger.js"],"names":["isElectron","require","log","global","logger","transports","file","level","maxSize","streamConfig","encoding","flags","console","format","error","filename","text","warn","info","debug"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,IAAIC,GAAJ;;AACA,WAAqC,CACnC;AACD,CAFD,MAEO,IAAIF,UAAU,EAAd,EAAkB;AAAEE,EAAAA,GAAG,GAAGC,MAAM,CAACD,GAAb;AAAmB;;AAE9C,MAAME,MAAM,GAAG,MAAM;AACnB,MAAIJ,UAAU,EAAd,EAAkB;AAChBE,IAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAf,CAAoBC,KAApB,GAA4B,QAAwC,MAAxC,GAAiD,OAA7E;AACAL,IAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAf,CAAoBA,IAApB,GAA2B,cAA3B;AACAJ,IAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAf,CAAoBE,OAApB,GAA8B,KAAK,IAAL,GAAY,IAA1C;AACAN,IAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAf,CAAoBG,YAApB,GAAmC;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAAnC;AACAT,IAAAA,GAAG,CAACG,UAAJ,CAAeO,OAAf,CAAuBL,KAAvB,GAA+B,KAA/B;AACAL,IAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAf,CAAoBO,MAApB,GAA6B,0CAA7B;AACD;;AACD,SAAOX,GAAP;AACD,CAVD;;AAWA,OAAO,MAAMY,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;AAC7C,QAAMZ,MAAM,EAAZ;;AACA,MAAI,QAAmCJ,UAAU,OAAO,KAAxD,EAA+D;AAC7DE,IAAAA,GAAG,CAACY,KAAJ,CAAW,GAAEC,QAAS,KAAIC,IAAK,EAA/B;AACD;AACF,CALM;AAMP,OAAO,MAAMC,IAAI,GAAG,OAAOF,QAAP,EAAiBC,IAAjB,KAA0B;AAC5C,QAAMZ,MAAM,EAAZ;;AACA,MAAI,QAAmCJ,UAAU,OAAO,KAAxD,EAA+D;AAC7DE,IAAAA,GAAG,CAACe,IAAJ,CAAU,GAAEF,QAAS,KAAIC,IAAK,EAA9B;AACD;AACF,CALM;AAMP,OAAO,MAAME,IAAI,GAAG,OAAOH,QAAP,EAAiBC,IAAjB,KAA0B;AAC5C,QAAMZ,MAAM,EAAZ;;AACA,MAAI,QAAmCJ,UAAU,OAAO,KAAxD,EAA+D;AAC7DE,IAAAA,GAAG,CAACgB,IAAJ,CAAU,GAAEH,QAAS,KAAIC,IAAK,EAA9B;AACD;AACF,CALM;AAMP,OAAO,MAAMG,KAAK,GAAG,OAAOJ,QAAP,EAAiBC,IAAjB,KAA0B;AAC7C,QAAMZ,MAAM,EAAZ;;AACA,MAAI,QAAmCJ,UAAU,OAAO,KAAxD,EAA+D;AAC7DE,IAAAA,GAAG,CAACiB,KAAJ,CAAW,GAAEJ,QAAS,KAAIC,IAAK,EAA/B;AACD;AACF,CALM;AAMP,eAAeZ,MAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const isElectron = require('is-electron');\n\nlet log;\nif (process.env.NODE_ENV === 'test') {\n  // eslint-disable-next-line global-require\n} else if (isElectron()) { log = global.log; }\n\nconst logger = () => {\n  if (isElectron()) {\n    log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n    log.transports.file.file = 'aglogger.log';\n    log.transports.file.maxSize = 15 * 1024 * 1024;\n    log.transports.file.streamConfig = { encoding: 'utf8', flags: 'a' };\n    log.transports.console.level = false;\n    log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n  }\n  return log;\n};\nexport const error = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.error(`${filename}: ${text}`);\n  }\n};\nexport const warn = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.warn(`${filename}: ${text}`);\n  }\n};\nexport const info = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.info(`${filename}: ${text}`);\n  }\n};\nexport const debug = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.debug(`${filename}: ${text}`);\n  }\n};\nexport default logger;\n\n// switch (level) {\n//   case 'error':\n//     log.error(`${filename}: ${text}`);\n//     break;\n//   case 'warn':\n//     log.warn(`${filename}: ${text}`);\n//     break;\n//   case 'info':\n//     log.info(`${filename}: ${text}`);\n//     break;\n//   case 'debug':\n//     log.debug(`${filename}: ${text}`);\n//     break;\n//   default:\n//     log.warn(`${filename}: ${text}`);\n// }\n// }\n//   else {\n//     log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n//     log.transports.console.level = false;\n//     log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n//   }\n"]},"metadata":{},"sourceType":"module"}