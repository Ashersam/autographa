{"ast":null,"code":"import * as localForage from 'localforage';\nimport * as logger from '../logger';\n\nconst path = require('path');\n\nlet error;\n\nconst uniqueUser = (users, email) => users.some(user => user.email === email);\n\nexport const loadUsers = async fs => {\n  const file = path.join('Autogrpha-DB', 'DB.json');\n\n  if (fs.existsSync(file)) {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to read the data from file');\n      } else {\n        logger.debug('handleJson.js', 'Successfully read the data from file'); // Add users to localForage:\n\n        localForage.setItem('users', JSON.parse(data), errLoc => {\n          if (errLoc) {\n            logger.error('handleJson.js', 'Failed to load users list to LocalStorage');\n          }\n\n          logger.debug('handleJson.js', 'Added users list to LocalStorage');\n        });\n      }\n    });\n  }\n};\nexport const handleJson = async (values, fs) => {\n  logger.debug('handleJson.js', 'Inside handleJson'); //   console.log('global', global.path);\n\n  fs.mkdirSync(path.join('Autogrpha-DB'), {\n    recursive: true\n  });\n  const file = path.join('Autogrpha-DB', 'DB.json');\n  error = {\n    userExist: false,\n    fetchFile: false\n  };\n\n  if (fs.existsSync(file)) {\n    return new Promise(resolve => {\n      fs.readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          logger.error('handleJson.js', 'Failed to read the data from file');\n          error.fetchFile = true;\n          resolve(error);\n        } else {\n          logger.debug('handleJson.js', 'Successfully read the data from file');\n          const json = JSON.parse(data);\n\n          if (uniqueUser(json, values.email)) {\n            error.userExist = true;\n            resolve(error);\n          } else {\n            json.push(values);\n\n            try {\n              fs.writeFileSync(file, JSON.stringify(json));\n              logger.debug('handleJson.js', 'Successfully added new user to the existing list in file'); // Add new user to localForage:\n\n              localForage.setItem('users', json, errLoc => {\n                if (errLoc) {\n                  logger.error('handleJson.js', 'Failed to add new user to existing list');\n                }\n\n                logger.debug('handleJson.js', 'Added new user to existing list');\n              });\n              resolve(error);\n            } catch (errCatch) {\n              logger.error('handleJson.js', 'Failed to add new user to the file');\n              resolve(error);\n            }\n          }\n        }\n      });\n    });\n  }\n\n  const array = [];\n  array.push(values);\n\n  try {\n    fs.writeFileSync(file, JSON.stringify(array));\n    logger.debug('handleJson.js', 'Successfully created and written to the file'); // Add new user to localForage:\n\n    localForage.setItem('users', array, err => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to Create a file and add user to LocalForage');\n      }\n\n      logger.debug('handleJson.js', 'Created a file and added user to LocalForage');\n    });\n    logger.debug('handleJson.js', 'Exiting from handleJson');\n    return error;\n  } catch (err) {\n    logger.error('handleJson.js', 'Failed to create and write to the file');\n    error.fetchFile = true;\n    return error;\n  }\n};","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/core/handleJson.js"],"names":["localForage","logger","path","require","error","uniqueUser","users","email","some","user","loadUsers","fs","file","join","existsSync","readFile","err","data","debug","setItem","JSON","parse","errLoc","handleJson","values","mkdirSync","recursive","userExist","fetchFile","Promise","resolve","json","push","writeFileSync","stringify","errCatch","array"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,aAA7B;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAIC,KAAJ;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACF,KAAL,KAAeA,KAApC,CAArC;;AAEA,OAAO,MAAMG,SAAS,GAAG,MAAOC,EAAP,IAAc;AACrC,QAAMC,IAAI,GAAGV,IAAI,CAACW,IAAL,CAAU,cAAV,EAA0B,SAA1B,CAAb;;AACA,MAAIF,EAAE,CAACG,UAAH,CAAcF,IAAd,CAAJ,EAAyB;AACvBD,IAAAA,EAAE,CAACI,QAAH,CAAYH,IAAZ,EAAkB,MAAlB,EAA0B,CAACI,GAAD,EAAMC,IAAN,KAAe;AACvC,UAAID,GAAJ,EAAS;AACPf,QAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,mCAA9B;AACD,OAFD,MAEO;AACLH,QAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,sCAA9B,EADK,CAEL;;AACAlB,QAAAA,WAAW,CAACmB,OAAZ,CAAoB,OAApB,EAA6BC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA7B,EAAgDK,MAAD,IAAY;AACzD,cAAIA,MAAJ,EAAY;AACVrB,YAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,2CAA9B;AACD;;AACDH,UAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,kCAA9B;AACD,SALD;AAMD;AACF,KAbD;AAcD;AACF,CAlBM;AAoBP,OAAO,MAAMK,UAAU,GAAG,OAAOC,MAAP,EAAeb,EAAf,KAAsB;AAC9CV,EAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,mBAA9B,EAD8C,CAE9C;;AACAP,EAAAA,EAAE,CAACc,SAAH,CAAavB,IAAI,CAACW,IAAL,CAAU,cAAV,CAAb,EAAwC;AACtCa,IAAAA,SAAS,EAAE;AAD2B,GAAxC;AAGA,QAAMd,IAAI,GAAGV,IAAI,CAACW,IAAL,CAAU,cAAV,EAA0B,SAA1B,CAAb;AACAT,EAAAA,KAAK,GAAG;AAAEuB,IAAAA,SAAS,EAAE,KAAb;AAAoBC,IAAAA,SAAS,EAAE;AAA/B,GAAR;;AACA,MAAIjB,EAAE,CAACG,UAAH,CAAcF,IAAd,CAAJ,EAAyB;AACvB,WAAO,IAAIiB,OAAJ,CAAaC,OAAD,IAAa;AAC9BnB,MAAAA,EAAE,CAACI,QAAH,CAAYH,IAAZ,EAAkB,MAAlB,EAA0B,CAACI,GAAD,EAAMC,IAAN,KAAe;AACvC,YAAID,GAAJ,EAAS;AACPf,UAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,mCAA9B;AACAA,UAAAA,KAAK,CAACwB,SAAN,GAAkB,IAAlB;AACAE,UAAAA,OAAO,CAAC1B,KAAD,CAAP;AACD,SAJD,MAIO;AACLH,UAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,sCAA9B;AACA,gBAAMa,IAAI,GAAGX,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAb;;AACA,cAAIZ,UAAU,CAAC0B,IAAD,EAAOP,MAAM,CAACjB,KAAd,CAAd,EAAoC;AAClCH,YAAAA,KAAK,CAACuB,SAAN,GAAkB,IAAlB;AACAG,YAAAA,OAAO,CAAC1B,KAAD,CAAP;AACD,WAHD,MAGO;AACL2B,YAAAA,IAAI,CAACC,IAAL,CAAUR,MAAV;;AACA,gBAAI;AACFb,cAAAA,EAAE,CAACsB,aAAH,CAAiBrB,IAAjB,EAAuBQ,IAAI,CAACc,SAAL,CAAeH,IAAf,CAAvB;AACA9B,cAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,0DAA9B,EAFE,CAGF;;AACAlB,cAAAA,WAAW,CAACmB,OAAZ,CAAoB,OAApB,EAA6BY,IAA7B,EAAoCT,MAAD,IAAY;AAC7C,oBAAIA,MAAJ,EAAY;AACVrB,kBAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,yCAA9B;AACD;;AACDH,gBAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,iCAA9B;AACD,eALD;AAMAY,cAAAA,OAAO,CAAC1B,KAAD,CAAP;AACD,aAXD,CAWE,OAAO+B,QAAP,EAAiB;AACjBlC,cAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,oCAA9B;AACA0B,cAAAA,OAAO,CAAC1B,KAAD,CAAP;AACD;AACF;AACF;AACF,OA9BD;AA+BD,KAhCM,CAAP;AAiCD;;AACD,QAAMgC,KAAK,GAAG,EAAd;AACAA,EAAAA,KAAK,CAACJ,IAAN,CAAWR,MAAX;;AACA,MAAI;AACFb,IAAAA,EAAE,CAACsB,aAAH,CAAiBrB,IAAjB,EAAuBQ,IAAI,CAACc,SAAL,CAAeE,KAAf,CAAvB;AACAnC,IAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,8CAA9B,EAFE,CAGF;;AACAlB,IAAAA,WAAW,CAACmB,OAAZ,CAAoB,OAApB,EAA6BiB,KAA7B,EAAqCpB,GAAD,IAAS;AAC3C,UAAIA,GAAJ,EAAS;AACPf,QAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,qDAA9B;AACD;;AACDH,MAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,8CAA9B;AACD,KALD;AAMAjB,IAAAA,MAAM,CAACiB,KAAP,CAAa,eAAb,EAA8B,yBAA9B;AACA,WAAOd,KAAP;AACD,GAZD,CAYE,OAAOY,GAAP,EAAY;AACZf,IAAAA,MAAM,CAACG,KAAP,CAAa,eAAb,EAA8B,wCAA9B;AACAA,IAAAA,KAAK,CAACwB,SAAN,GAAkB,IAAlB;AACA,WAAOxB,KAAP;AACD;AACF,CA9DM","sourcesContent":["import * as localForage from 'localforage';\nimport * as logger from '../logger';\n\nconst path = require('path');\n\nlet error;\nconst uniqueUser = (users, email) => users.some((user) => user.email === email);\n\nexport const loadUsers = async (fs) => {\n  const file = path.join('Autogrpha-DB', 'DB.json');\n  if (fs.existsSync(file)) {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to read the data from file');\n      } else {\n        logger.debug('handleJson.js', 'Successfully read the data from file');\n        // Add users to localForage:\n        localForage.setItem('users', JSON.parse(data), (errLoc) => {\n          if (errLoc) {\n            logger.error('handleJson.js', 'Failed to load users list to LocalStorage');\n          }\n          logger.debug('handleJson.js', 'Added users list to LocalStorage');\n        });\n      }\n    });\n  }\n};\n\nexport const handleJson = async (values, fs) => {\n  logger.debug('handleJson.js', 'Inside handleJson');\n  //   console.log('global', global.path);\n  fs.mkdirSync(path.join('Autogrpha-DB'), {\n    recursive: true,\n  });\n  const file = path.join('Autogrpha-DB', 'DB.json');\n  error = { userExist: false, fetchFile: false };\n  if (fs.existsSync(file)) {\n    return new Promise((resolve) => {\n      fs.readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          logger.error('handleJson.js', 'Failed to read the data from file');\n          error.fetchFile = true;\n          resolve(error);\n        } else {\n          logger.debug('handleJson.js', 'Successfully read the data from file');\n          const json = JSON.parse(data);\n          if (uniqueUser(json, values.email)) {\n            error.userExist = true;\n            resolve(error);\n          } else {\n            json.push(values);\n            try {\n              fs.writeFileSync(file, JSON.stringify(json));\n              logger.debug('handleJson.js', 'Successfully added new user to the existing list in file');\n              // Add new user to localForage:\n              localForage.setItem('users', json, (errLoc) => {\n                if (errLoc) {\n                  logger.error('handleJson.js', 'Failed to add new user to existing list');\n                }\n                logger.debug('handleJson.js', 'Added new user to existing list');\n              });\n              resolve(error);\n            } catch (errCatch) {\n              logger.error('handleJson.js', 'Failed to add new user to the file');\n              resolve(error);\n            }\n          }\n        }\n      });\n    });\n  }\n  const array = [];\n  array.push(values);\n  try {\n    fs.writeFileSync(file, JSON.stringify(array));\n    logger.debug('handleJson.js', 'Successfully created and written to the file');\n    // Add new user to localForage:\n    localForage.setItem('users', array, (err) => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to Create a file and add user to LocalForage');\n      }\n      logger.debug('handleJson.js', 'Created a file and added user to LocalForage');\n    });\n    logger.debug('handleJson.js', 'Exiting from handleJson');\n    return error;\n  } catch (err) {\n    logger.error('handleJson.js', 'Failed to create and write to the file');\n    error.fetchFile = true;\n    return error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}