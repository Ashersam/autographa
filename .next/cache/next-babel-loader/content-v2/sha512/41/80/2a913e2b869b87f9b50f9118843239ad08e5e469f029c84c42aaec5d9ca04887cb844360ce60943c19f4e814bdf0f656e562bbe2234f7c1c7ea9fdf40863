{"ast":null,"code":"import _regeneratorRuntime from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar isElectron = require('is-electron');\n\nvar log;\n\nif (false) {// eslint-disable-next-line global-require\n} else if (isElectron()) {\n  log = global.log;\n}\n\nvar logger = function logger() {\n  if (isElectron()) {\n    log.transports.file.level = false ? 'warn' : 'debug';\n    log.transports.file.file = 'aglogger.log';\n    log.transports.file.maxSize = 15 * 1024 * 1024;\n    log.transports.file.streamConfig = {\n      encoding: 'utf8',\n      flags: 'a'\n    };\n    log.transports.console.level = false;\n    log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n  }\n\n  return log;\n};\n\nexport var error = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename, text) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return logger();\n\n          case 2:\n            if (true && isElectron() !== false) {\n              log.error(\"\".concat(filename, \": \").concat(text));\n            }\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function error(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var warn = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filename, text) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return logger();\n\n          case 2:\n            if (true && isElectron() !== false) {\n              log.warn(\"\".concat(filename, \": \").concat(text));\n            }\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function warn(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var info = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filename, text) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return logger();\n\n          case 2:\n            if (true && isElectron() !== false) {\n              log.info(\"\".concat(filename, \": \").concat(text));\n            }\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function info(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var debug = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(filename, text) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return logger();\n\n          case 2:\n            if (true && isElectron() !== false) {\n              log.debug(\"\".concat(filename, \": \").concat(text));\n            }\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function debug(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport default logger; // switch (level) {\n//   case 'error':\n//     log.error(`${filename}: ${text}`);\n//     break;\n//   case 'warn':\n//     log.warn(`${filename}: ${text}`);\n//     break;\n//   case 'info':\n//     log.info(`${filename}: ${text}`);\n//     break;\n//   case 'debug':\n//     log.debug(`${filename}: ${text}`);\n//     break;\n//   default:\n//     log.warn(`${filename}: ${text}`);\n// }\n// }\n//   else {\n//     log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n//     log.transports.console.level = false;\n//     log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n//   }","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/logger.js"],"names":["isElectron","require","log","global","logger","transports","file","level","maxSize","streamConfig","encoding","flags","console","format","error","filename","text","warn","info","debug"],"mappings":"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","sourcesContent":["const isElectron = require('is-electron');\n\nlet log;\nif (process.env.NODE_ENV === 'test') {\n  // eslint-disable-next-line global-require\n} else if (isElectron()) { log = global.log; }\n\nconst logger = () => {\n  if (isElectron()) {\n    log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n    log.transports.file.file = 'aglogger.log';\n    log.transports.file.maxSize = 15 * 1024 * 1024;\n    log.transports.file.streamConfig = { encoding: 'utf8', flags: 'a' };\n    log.transports.console.level = false;\n    log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n  }\n  return log;\n};\nexport const error = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.error(`${filename}: ${text}`);\n  }\n};\nexport const warn = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.warn(`${filename}: ${text}`);\n  }\n};\nexport const info = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.info(`${filename}: ${text}`);\n  }\n};\nexport const debug = async (filename, text) => {\n  await logger();\n  if (process.env.NODE_ENV !== 'test' && isElectron() !== false) {\n    log.debug(`${filename}: ${text}`);\n  }\n};\nexport default logger;\n\n// switch (level) {\n//   case 'error':\n//     log.error(`${filename}: ${text}`);\n//     break;\n//   case 'warn':\n//     log.warn(`${filename}: ${text}`);\n//     break;\n//   case 'info':\n//     log.info(`${filename}: ${text}`);\n//     break;\n//   case 'debug':\n//     log.debug(`${filename}: ${text}`);\n//     break;\n//   default:\n//     log.warn(`${filename}: ${text}`);\n// }\n// }\n//   else {\n//     log.transports.file.level = process.env.NODE_ENV === 'production' ? 'warn' : 'debug';\n//     log.transports.console.level = false;\n//     log.transports.file.format = '{y}-{m}-{d} {h}:{i}:{s} [{level}] {text}';\n//   }\n"]},"metadata":{},"sourceType":"module"}