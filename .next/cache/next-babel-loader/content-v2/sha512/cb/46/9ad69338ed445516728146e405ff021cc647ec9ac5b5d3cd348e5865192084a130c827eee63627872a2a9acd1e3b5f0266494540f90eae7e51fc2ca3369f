{"ast":null,"code":"var _jsxFileName = \"/home/asherphilip/Documents/autographa/renderer/src/components/Login/CustomLogin.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField, Button, Grid, Link, Typography } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nconst CustomLogin = ({\n  ui,\n  error,\n  login,\n  userlist,\n  validation\n}) => {\n  var _ui$autocomplete, _ui$autocomplete$coun, _ui$textfield, _ui$textfield$count;\n\n  const [values, setValue] = React.useState({});\n\n  const handleChange = prop => event => {\n    setValue(_objectSpread(_objectSpread({}, values), {}, {\n      [prop]: event.target.value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    login(values);\n    setValue({});\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    key: \"login\",\n    name: \"aglogin\",\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, validation === null || validation === void 0 ? void 0 : validation.msg), ui === null || ui === void 0 ? void 0 : (_ui$autocomplete = ui.autocomplete) === null || _ui$autocomplete === void 0 ? void 0 : (_ui$autocomplete$coun = _ui$autocomplete.count) === null || _ui$autocomplete$coun === void 0 ? void 0 : _ui$autocomplete$coun.map(v => __jsx(Grid, {\n    key: v.label,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(PersonOutlineIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }), __jsx(Autocomplete, {\n    freeSolo: true,\n    \"data-testid\": \"autocomplete\",\n    options: userlist,\n    getOptionLabel: option => option.email,\n    getOptionSelected: (option, value) => option.email === value.email,\n    onInputChange: (event, newInputValue) => {\n      setValue(_objectSpread(_objectSpread({}, values), {}, {\n        username: newInputValue\n      }));\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: v.label,\n      error: error.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 31\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }))), ui === null || ui === void 0 ? void 0 : (_ui$textfield = ui.textfield) === null || _ui$textfield === void 0 ? void 0 : (_ui$textfield$count = _ui$textfield.count) === null || _ui$textfield$count === void 0 ? void 0 : _ui$textfield$count.map(c => __jsx(\"div\", {\n    key: c.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    key: c.label,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, c.type === 'text' && __jsx(PersonOutlineIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 39\n    }\n  }), c.type === 'password' && __jsx(LockOpenIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 43\n    }\n  }), __jsx(TextField, {\n    name: c.name,\n    label: c.label,\n    type: c.type,\n    onChange: handleChange(c.label),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  })), __jsx(Typography, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, validation === null || validation === void 0 ? void 0 : validation[c.name]))), (ui === null || ui === void 0 ? void 0 : ui.viewForgot) && __jsx(Link, {\n    href: \"/signup\",\n    variant: \"body2\",\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Forgot Password?\"), __jsx(Button, {\n    \"data-testid\": \"login-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"LOGIN\"))));\n};\n\nexport default CustomLogin;\nCustomLogin.propTypes = {\n  /** State which triggers login. */\n  ui: PropTypes.object,\n  error: PropTypes.object,\n  login: PropTypes.func,\n  userlist: PropTypes.array,\n  validation: PropTypes.object\n};","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/Login/CustomLogin.js"],"names":["React","PropTypes","TextField","Button","Grid","Link","Typography","Autocomplete","PersonOutlineIcon","LockOpenIcon","CustomLogin","ui","error","login","userlist","validation","values","setValue","useState","handleChange","prop","event","target","value","handleSubmit","e","preventDefault","msg","autocomplete","count","map","v","label","option","email","newInputValue","username","params","textfield","c","name","type","viewForgot","propTypes","object","func","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n TextField, Button, Grid, Link, Typography,\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nconst CustomLogin = ({\n ui, error, login, userlist, validation,\n}) => {\n  const [values, setValue] = React.useState({ });\n  const handleChange = (prop) => (event) => {\n    setValue({ ...values, [prop]: event.target.value });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    login(values);\n    setValue({});\n  };\n  return (\n    <>\n      <Grid container direction=\"column\" spacing={2}>\n        <form key=\"login\" name=\"aglogin\" onSubmit={(e) => handleSubmit(e)}>\n          <Typography color=\"error\">{validation?.msg}</Typography>\n          {(ui?.autocomplete?.count)?.map((v) => (\n            <Grid key={v.label} container spacing={1} alignItems=\"flex-end\">\n              <PersonOutlineIcon />\n              <Autocomplete\n                freeSolo\n                data-testid=\"autocomplete\"\n                options={userlist}\n                getOptionLabel={(option) => option.email}\n                getOptionSelected={(option, value) => option.email === value.email}\n                onInputChange={(event, newInputValue) => {\n                  setValue({ ...values, username: newInputValue });\n                    }}\n                renderInput={\n                  (params) => <TextField {...params} label={v.label} error={error.username} />\n                  }\n              />\n            </Grid>\n        ))}\n          {(ui?.textfield?.count)?.map((c) => (\n            <div key={c.name}>\n              <Grid key={c.label} container spacing={1} alignItems=\"flex-end\">\n                {c.type === 'text' && <PersonOutlineIcon />}\n                {c.type === 'password' && <LockOpenIcon />}\n                <TextField\n                  name={c.name}\n                  label={c.label}\n                  type={c.type}\n                  onChange={handleChange(c.label)}\n                />\n              </Grid>\n              <Typography color=\"error\">{validation?.[c.name]}</Typography>\n            </div>\n\n        ))}\n          {ui?.viewForgot && (\n          <Link\n            href=\"/signup\"\n            variant=\"body2\"\n            align=\"right\"\n          >\n            Forgot Password?\n          </Link>\n        )}\n          <Button data-testid=\"login-button\" type=\"submit\">LOGIN</Button>\n        </form>\n      </Grid>\n    </>\n  );\n};\nexport default CustomLogin;\nCustomLogin.propTypes = {\n  /** State which triggers login. */\n  ui: PropTypes.object,\n  error: PropTypes.object,\n  login: PropTypes.func,\n  userlist: PropTypes.array,\n  validation: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}