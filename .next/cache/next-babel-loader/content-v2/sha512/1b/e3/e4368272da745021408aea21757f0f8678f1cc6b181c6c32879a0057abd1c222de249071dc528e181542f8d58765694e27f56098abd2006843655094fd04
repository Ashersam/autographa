{"ast":null,"code":"import _extends from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/asherphilip/Documents/autographa/renderer/src/components/MdEditor/MDEditor.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable global-require */\n// @flow\nimport * as React from 'react';\nimport { BlockEditable } from 'markdown-translatable/dist/components';\nimport { Button } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport * as logger from '../../logger';\nimport CustomDialog from '../ApplicationBar/CustomDialog';\n\nfunction a11yProps(index) {\n  return {\n    id: \"full-width-tab-\".concat(index),\n    'aria-controls': \"full-width-tabpanel-\".concat(index)\n  };\n}\n\nexport var MDEditor = function MDEditor(_ref) {\n  _s();\n\n  var openMDFile = _ref.openMDFile,\n      setopenMDFile = _ref.setopenMDFile,\n      mdFilePath = _ref.mdFilePath;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      onedit = _React$useState2[0],\n      setEdit = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      preview = _React$useState4[0],\n      setpreview = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      translation = _React$useState6[0],\n      settranslation = _React$useState6[1];\n\n  var handleEdit = function handleEdit(edit) {\n    setEdit(edit);\n  };\n\n  var handleClose = function handleClose() {\n    setopenMDFile(false);\n  };\n\n  var callback = function callback(markdown) {\n    logger.debug('markdownviewer.js', \"set translation as \".concat(markdown));\n    settranslation(markdown);\n  };\n\n  React.useEffect(function () {\n    settranslation(mdFilePath);\n  }, [mdFilePath]);\n\n  var title = __jsx(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(Tabs, {\n    value: onedit,\n    onChange: handleEdit,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    \"data-testid\": \"test-tabs\",\n    \"aria-label\": \"full width tabs example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(Tab, _extends({\n    onClick: function onClick() {\n      return setpreview(true);\n    },\n    \"data-testid\": \"test-preview\",\n    label: \"Preview\"\n  }, a11yProps(0), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), __jsx(Tab, _extends({\n    onClick: function onClick() {\n      return setpreview(false);\n    },\n    \"data-testid\": \"test-markdown\",\n    label: \"Markdown\"\n  }, a11yProps(1), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }))));\n\n  var content = __jsx(React.Fragment, null, onedit === 0 ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(BlockEditable, {\n    markdown: translation,\n    preview: preview,\n    onEdit: callback,\n    inputFilters: [[/<br>/gi, '\\n'], [/(<u>|<\\/u>)/gi, '__']],\n    outputFilters: [[/\\n/gi, '<br>']],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(BlockEditable, {\n    markdown: translation,\n    preview: preview,\n    onEdit: callback,\n    inputFilters: [[/<br>/gi, '\\n'], [/(<u>|<\\/u>)/gi, '__']],\n    outputFilters: [[/\\n/gi, '<br>']],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })));\n\n  var button = __jsx(React.Fragment, null, __jsx(Button, {\n    autoFocus: true,\n    onClick: handleClose,\n    \"data-testid\": \"test-cancel\",\n    variant: \"contained\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"cancel\"), __jsx(Button, {\n    autoFocus: true,\n    onClick: handleClose,\n    variant: \"contained\",\n    \"data-testid\": \"test-save\",\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"save\"));\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, __jsx(CustomDialog, {\n    open: openMDFile,\n    setOpen: setopenMDFile,\n    title: title,\n    buttons: button,\n    content: content,\n    width: \"xl\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(MDEditor, \"hT3b5xqjyLmEJItEAASl/a0zfVM=\");\n\n_c = MDEditor;\nMDEditor.propTypes = {\n  openMDFile: PropTypes.bool.isRequired,\n  setopenMDFile: PropTypes.func,\n  mdFilePath: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MDEditor\");","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/MdEditor/MDEditor.js"],"names":["React","BlockEditable","Button","AppBar","Tabs","Tab","PropTypes","logger","CustomDialog","a11yProps","index","id","MDEditor","openMDFile","setopenMDFile","mdFilePath","useState","onedit","setEdit","preview","setpreview","translation","settranslation","handleEdit","edit","handleClose","callback","markdown","debug","useEffect","title","content","button","propTypes","bool","isRequired","func","string"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\n// @flow\nimport * as React from 'react';\nimport { BlockEditable } from 'markdown-translatable/dist/components';\nimport { Button } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport * as logger from '../../logger';\nimport CustomDialog from '../ApplicationBar/CustomDialog';\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\nexport const MDEditor = ({\n  openMDFile,\n  setopenMDFile,\n  mdFilePath,\n}) => {\n  const [onedit, setEdit] = React.useState(0);\n  const [preview, setpreview] = React.useState(true);\n  const [translation, settranslation] = React.useState();\n\n  const handleEdit = (edit) => {\n    setEdit(edit);\n  };\n\n  const handleClose = () => {\n    setopenMDFile(false);\n  };\n\n  const callback = (markdown) => {\n    logger.debug('markdownviewer.js', `set translation as ${markdown}`);\n    settranslation(markdown);\n  };\n\n  React.useEffect(() => {\n    settranslation(mdFilePath);\n  }, [mdFilePath]);\n\n  const title = (\n    <AppBar position=\"static\" color=\"default\">\n      <Tabs\n        value={onedit}\n        onChange={handleEdit}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        data-testid=\"test-tabs\"\n        aria-label=\"full width tabs example\"\n      >\n        <Tab\n          onClick={() => setpreview(true)}\n          data-testid=\"test-preview\"\n          label=\"Preview\"\n          {...a11yProps(0)}\n        />\n        <Tab\n          onClick={() => setpreview(false)}\n          data-testid=\"test-markdown\"\n          label=\"Markdown\"\n          {...a11yProps(1)}\n        />\n      </Tabs>\n    </AppBar>\n  );\n\n  const content = (\n    <>\n      {onedit === 0 ? (\n        <div>\n          <BlockEditable\n            markdown={translation}\n            preview={preview}\n            onEdit={callback}\n            inputFilters={[\n              [/<br>/gi, '\\n'],\n              [/(<u>|<\\/u>)/gi, '__'],\n            ]}\n            outputFilters={[[/\\n/gi, '<br>']]}\n          />\n        </div>\n      ) : (\n        <div>\n          <BlockEditable\n            markdown={translation}\n            preview={preview}\n            onEdit={callback}\n            inputFilters={[\n              [/<br>/gi, '\\n'],\n              [/(<u>|<\\/u>)/gi, '__'],\n            ]}\n            outputFilters={[[/\\n/gi, '<br>']]}\n          />\n        </div>\n      )}\n    </>\n  );\n\n  const button = (\n    <>\n      <Button\n        autoFocus\n        onClick={handleClose}\n        data-testid=\"test-cancel\"\n        variant=\"contained\"\n      >\n        cancel\n      </Button>\n      <Button\n        autoFocus\n        onClick={handleClose}\n        variant=\"contained\"\n        data-testid=\"test-save\"\n        color=\"primary\"\n      >\n        save\n      </Button>\n    </>\n  );\n\n  return (\n    <div>\n      <CustomDialog\n        open={openMDFile}\n        setOpen={setopenMDFile}\n        title={title}\n        buttons={button}\n        content={content}\n        width=\"xl\"\n      />\n    </div>\n  );\n};\n\nMDEditor.propTypes = {\n  openMDFile: PropTypes.bool.isRequired,\n  setopenMDFile: PropTypes.func,\n  mdFilePath: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}