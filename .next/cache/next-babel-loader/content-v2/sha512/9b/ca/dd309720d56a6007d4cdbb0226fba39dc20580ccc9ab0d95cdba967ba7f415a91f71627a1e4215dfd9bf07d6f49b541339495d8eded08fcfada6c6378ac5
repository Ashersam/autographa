{"ast":null,"code":"import _slicedToArray from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport * as localForage from 'localforage';\nimport React from 'react';\nimport { Configuration, PublicApi } from '@ory/kratos-client';\nimport * as logger from '../../logger';\nimport { isElectron } from '../../core/handleElectron';\n\nvar jwt = require('jsonwebtoken');\n\nvar kratos = new PublicApi(new Configuration({\n  basePath: 'http://127.0.0.1:4433/'\n}));\n\nfunction useAuthentication() {\n  _s();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      accessToken = _React$useState2[0],\n      setaccessToken = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      currentUser = _React$useState4[0],\n      setCurrentUser = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      config = _React$useState6[0],\n      setConfig = _React$useState6[1];\n\n  var getToken = function getToken() {\n    logger.debug('useAuthentication.js', 'In getToken to check any token stored in localStorage');\n    localForage.getItem('sessionToken').then(function (value) {\n      setaccessToken(value);\n    });\n  };\n\n  var handleUser = function handleUser() {\n    logger.debug('useAuthentication.js', 'In handleUser to retrieve the user from the Token');\n    jwt.verify(accessToken, 'agv2', function (err, decoded) {\n      localForage.getItem('users').then(function (user) {\n        var obj = user.find(function (u) {\n          return u.email === decoded.sessionData.user;\n        });\n        setCurrentUser(obj);\n      });\n    });\n  };\n\n  var generateToken = function generateToken(user) {\n    logger.debug('useAuthentication.js', 'In generateToken to generate a Token for the loggedIn user');\n    var sessionData = {\n      user: user.email,\n      loggedAt: Date(),\n      active: true,\n      remember: true\n    }; // console.log(process.env.REACT_APP_AG_JWT)\n\n    var token = jwt.sign({\n      sessionData: sessionData\n    }, 'agv2');\n\n    if (token) {\n      localForage.setItem('sessionToken', token);\n      setaccessToken(token);\n    }\n  };\n\n  var logout = function logout() {\n    setaccessToken();\n    setCurrentUser();\n    localForage.removeItem('sessionToken');\n  };\n\n  var getConfig = function getConfig(flowId) {\n    kratos.getSelfServiceLoginFlow(flowId).then(function (_ref) {\n      var _flow$methods, _flow$methods$passwor;\n\n      var flow = _ref.data;\n      setConfig(flow === null || flow === void 0 ? void 0 : (_flow$methods = flow.methods) === null || _flow$methods === void 0 ? void 0 : (_flow$methods$passwor = _flow$methods.password) === null || _flow$methods$passwor === void 0 ? void 0 : _flow$methods$passwor.config);\n    });\n  };\n\n  React.useEffect(function () {\n    if (isElectron()) {\n      kratos.initializeSelfServiceLoginViaAPIFlow().then(function (_ref2) {\n        var flow = _ref2.data;\n        getConfig(flow.id);\n      });\n    }\n  }, []);\n  React.useEffect(function () {\n    if (accessToken && !currentUser) {\n      handleUser();\n    }\n  });\n  var response = {\n    state: {\n      accessToken: accessToken,\n      currentUser: currentUser,\n      config: config\n    },\n    actions: {\n      getToken: getToken,\n      generateToken: generateToken,\n      logout: logout,\n      getConfig: getConfig\n    }\n  };\n  return response;\n}\n\n_s(useAuthentication, \"kC4FZiwcWlEQQEzHnJwLCuKNBVE=\");\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/Login/useAuthentication.js"],"names":["localForage","React","Configuration","PublicApi","logger","isElectron","jwt","require","kratos","basePath","useAuthentication","useState","accessToken","setaccessToken","currentUser","setCurrentUser","config","setConfig","getToken","debug","getItem","then","value","handleUser","verify","err","decoded","user","obj","find","u","email","sessionData","generateToken","loggedAt","Date","active","remember","token","sign","setItem","logout","removeItem","getConfig","flowId","getSelfServiceLoginFlow","flow","data","methods","password","useEffect","initializeSelfServiceLoginViaAPIFlow","id","response","state","actions"],"mappings":"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","sourcesContent":["import * as localForage from 'localforage';\nimport React from 'react';\nimport { Configuration, PublicApi } from '@ory/kratos-client';\nimport * as logger from '../../logger';\nimport { isElectron } from '../../core/handleElectron';\n\nconst jwt = require('jsonwebtoken');\n\nconst kratos = new PublicApi(new Configuration({ basePath: 'http://127.0.0.1:4433/' }));\n\nfunction useAuthentication() {\n  const [accessToken, setaccessToken] = React.useState();\n  const [currentUser, setCurrentUser] = React.useState();\n  const [config, setConfig] = React.useState();\n  const getToken = () => {\n    logger.debug('useAuthentication.js', 'In getToken to check any token stored in localStorage');\n    localForage.getItem('sessionToken').then((value) => {\n      setaccessToken(value);\n    });\n  };\n  const handleUser = () => {\n    logger.debug('useAuthentication.js', 'In handleUser to retrieve the user from the Token');\n    jwt.verify(accessToken, 'agv2', (err, decoded) => {\n      localForage.getItem('users').then((user) => {\n        const obj = user.find(\n          (u) => u.email === decoded.sessionData.user,\n        );\n        setCurrentUser(obj);\n      });\n    });\n  };\n  const generateToken = (user) => {\n    logger.debug('useAuthentication.js', 'In generateToken to generate a Token for the loggedIn user');\n    const sessionData = {\n      user: user.email,\n      loggedAt: Date(),\n      active: true,\n      remember: true,\n    };\n    // console.log(process.env.REACT_APP_AG_JWT)\n    const token = jwt.sign({ sessionData }, 'agv2');\n    if (token) {\n      localForage.setItem('sessionToken', token);\n      setaccessToken(token);\n    }\n  };\n  const logout = () => {\n    setaccessToken();\n    setCurrentUser();\n    localForage.removeItem('sessionToken');\n  };\n  const getConfig = (flowId) => {\n    kratos.getSelfServiceLoginFlow(flowId)\n      .then(({ data: flow }) => {\n        setConfig(flow?.methods?.password?.config);\n      });\n  };\n  React.useEffect(() => {\n    if (isElectron()) {\n      kratos.initializeSelfServiceLoginViaAPIFlow().then(({ data: flow }) => {\n        getConfig(flow.id);\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    if (accessToken && !currentUser) {\n      handleUser();\n    }\n  });\n  const response = {\n    state: { accessToken, currentUser, config },\n    actions: {\n      getToken, generateToken, logout, getConfig,\n    },\n  };\n  return response;\n}\nexport default useAuthentication;\n"]},"metadata":{},"sourceType":"module"}