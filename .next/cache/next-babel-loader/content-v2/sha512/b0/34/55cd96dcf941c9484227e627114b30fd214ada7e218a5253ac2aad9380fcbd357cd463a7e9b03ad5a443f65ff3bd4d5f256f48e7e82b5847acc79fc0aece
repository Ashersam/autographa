{"ast":null,"code":"var _jsxFileName = \"/home/asherphilip/Documents/autographa/renderer/src/components/Search/SearchForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { InputBase, Toolbar } from '@material-ui/core';\nimport { Search } from '@material-ui/icons';\nimport { searchStyles } from './SearchStyles'; // import AwesomeDebouncePromise from 'awesome-debounce-promise';\n\nfunction SearchForm({\n  defaultQuery,\n  contentList1,\n  contentList2,\n  filterList,\n  onfilerRequest1,\n  onfilerRequest2\n}) {\n  const classes = searchStyles();\n  const {\n    0: query,\n    1: setQuery\n  } = useState(defaultQuery); // eslint-disable-next-line no-unused-vars\n  // exclude column list from filter\n\n  const excludeColumns = filterList.splice(filterList.indexOf(), 1); // const contentSearchDebounced = AwesomeDebouncePromise(\n  //   async (_props) => await contentSearch(_props),\n  //   250,\n  // );\n\n  const onQuery = useCallback((_query, content) => {\n    setQuery(_query);\n\n    const lowercasedValue = _query.toLowerCase().trim();\n\n    if (lowercasedValue === '') {\n      return content;\n    }\n\n    const filteredData = content.filter(item => Object.keys(item).some(key => excludeColumns.includes(key) ? false : item[key].toString().toLowerCase().includes(lowercasedValue)));\n    return filteredData;\n  }, [excludeColumns]); // handle change event of search input\n\n  const handleChange = value => {\n    setQuery(value);\n\n    if (contentList2 !== undefined) {\n      onfilerRequest1(onQuery(value, contentList1));\n      onfilerRequest2(onQuery(value, contentList2));\n    } else {\n      onfilerRequest1(onQuery(value, contentList1));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.searchIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  })), __jsx(InputBase, {\n    placeholder: \"Search\\u2026\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"text\",\n    variant: \"outlined\",\n    fullWidth: true,\n    autoComplete: undefined,\n    classes: {\n      root: classes.inputRoot,\n      input: classes.inputInput\n    },\n    inputProps: {\n      'aria-label': 'search',\n      'data-testid': 'searchfield'\n    },\n    value: query,\n    onChange: e => handleChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }))));\n}\n\nSearchForm.propTypes = {\n  /** Prefill the query search field. */\n  defaultQuery: PropTypes.string,\n\n  /** Array list of items  */\n  contentList1: PropTypes.array,\n  contentList2: PropTypes.array,\n\n  /** Array list to be filtered  */\n  filterList: PropTypes.array,\n\n  /** Function to propogate the returned repositories data array. */\n  onfilerRequest1: PropTypes.func,\n  onfilerRequest2: PropTypes.func\n  /** Configuration required if paths are provided as URL. */\n\n};\nexport default SearchForm;","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/Search/SearchForm.js"],"names":["React","useState","useCallback","PropTypes","InputBase","Toolbar","Search","searchStyles","SearchForm","defaultQuery","contentList1","contentList2","filterList","onfilerRequest1","onfilerRequest2","classes","query","setQuery","excludeColumns","splice","indexOf","onQuery","_query","content","lowercasedValue","toLowerCase","trim","filteredData","filter","item","Object","keys","some","key","includes","toString","handleChange","value","undefined","root","search","searchIcon","inputRoot","input","inputInput","e","target","propTypes","string","array","func"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,SADF,EAEEC,OAFF,QAGO,mBAHP;AAIA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CACA;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,YADkB;AAElBC,EAAAA,YAFkB;AAGlBC,EAAAA,YAHkB;AAIlBC,EAAAA,UAJkB;AAKlBC,EAAAA,eALkB;AAMlBC,EAAAA;AANkB,CAApB,EAOG;AACD,QAAMC,OAAO,GAAGR,YAAY,EAA5B;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAACQ,YAAD,CAAlC,CAFC,CAGD;AACA;;AACA,QAAMS,cAAc,GAAGN,UAAU,CAACO,MAAX,CAAkBP,UAAU,CAACQ,OAAX,EAAlB,EAAwC,CAAxC,CAAvB,CALC,CAOD;AACA;AACA;AACA;;AAEA,QAAMC,OAAO,GAAGnB,WAAW,CAAC,CAACoB,MAAD,EAASC,OAAT,KAAqB;AAC/CN,IAAAA,QAAQ,CAACK,MAAD,CAAR;;AACA,UAAME,eAAe,GAAGF,MAAM,CAACG,WAAP,GAAqBC,IAArB,EAAxB;;AACA,QAAIF,eAAe,KAAK,EAAxB,EAA4B;AAC1B,aAAOD,OAAP;AACD;;AAEC,UAAMI,YAAY,GAAGJ,OAAO,CAACK,MAAR,CAClBC,IAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,IAAlB,CAAwBC,GAAD,IAAUf,cAAc,CAACgB,QAAf,CAAwBD,GAAxB,IACvC,KADuC,GAEvCJ,IAAI,CAACI,GAAD,CAAJ,CAAUE,QAAV,GAAqBV,WAArB,GAAmCS,QAAnC,CAA4CV,eAA5C,CAFM,CADS,CAArB;AAKA,WAAOG,YAAP;AACH,GAb0B,EAaxB,CAACT,cAAD,CAbwB,CAA3B,CAZC,CA2BD;;AACA,QAAMkB,YAAY,GAAIC,KAAD,IAAW;AAC9BpB,IAAAA,QAAQ,CAACoB,KAAD,CAAR;;AACA,QAAI1B,YAAY,KAAK2B,SAArB,EAAgC;AAC9BzB,MAAAA,eAAe,CAACQ,OAAO,CAACgB,KAAD,EAAQ3B,YAAR,CAAR,CAAf;AACAI,MAAAA,eAAe,CAACO,OAAO,CAACgB,KAAD,EAAQ1B,YAAR,CAAR,CAAf;AACD,KAHD,MAGO;AACLE,MAAAA,eAAe,CAACQ,OAAO,CAACgB,KAAD,EAAQ3B,YAAR,CAAR,CAAf;AACD;AACF,GARD;;AAUA,SACE;AAAK,IAAA,SAAS,EAAEK,OAAO,CAACwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAExB,OAAO,CAACyB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEzB,OAAO,CAAC0B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,SAAD;AACE,IAAA,WAAW,EAAC,cADd;AAEE,IAAA,EAAE,EAAC,QAFL;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,OAAO,EAAC,UALV;AAME,IAAA,SAAS,MANX;AAOE,IAAA,YAAY,EAAEH,SAPhB;AAQE,IAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAExB,OAAO,CAAC2B,SADP;AAEPC,MAAAA,KAAK,EAAE5B,OAAO,CAAC6B;AAFR,KARX;AAYE,IAAA,UAAU,EAAE;AACV,oBAAc,QADJ;AAEV,qBAAe;AAFL,KAZd;AAgBE,IAAA,KAAK,EAAE5B,KAhBT;AAiBE,IAAA,QAAQ,EAAG6B,CAAD,IAAOT,YAAY,CAACS,CAAC,CAACC,MAAF,CAAST,KAAV,CAjB/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF,CADF;AA8BD;;AAED7B,UAAU,CAACuC,SAAX,GAAuB;AACrB;AACAtC,EAAAA,YAAY,EAAEN,SAAS,CAAC6C,MAFH;;AAGrB;AACAtC,EAAAA,YAAY,EAAEP,SAAS,CAAC8C,KAJH;AAKrBtC,EAAAA,YAAY,EAAER,SAAS,CAAC8C,KALH;;AAMrB;AACArC,EAAAA,UAAU,EAAET,SAAS,CAAC8C,KAPD;;AAQrB;AACApC,EAAAA,eAAe,EAAEV,SAAS,CAAC+C,IATN;AAUrBpC,EAAAA,eAAe,EAAEX,SAAS,CAAC+C;AAC3B;;AAXqB,CAAvB;AAcA,eAAe1C,UAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  InputBase,\n  Toolbar,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons';\nimport { searchStyles } from './SearchStyles';\n// import AwesomeDebouncePromise from 'awesome-debounce-promise';\n\nfunction SearchForm({\n  defaultQuery,\n  contentList1,\n  contentList2,\n  filterList,\n  onfilerRequest1,\n  onfilerRequest2,\n}) {\n  const classes = searchStyles();\n  const [query, setQuery] = useState(defaultQuery);\n  // eslint-disable-next-line no-unused-vars\n  // exclude column list from filter\n  const excludeColumns = filterList.splice(filterList.indexOf(), 1);\n\n  // const contentSearchDebounced = AwesomeDebouncePromise(\n  //   async (_props) => await contentSearch(_props),\n  //   250,\n  // );\n\n  const onQuery = useCallback((_query, content) => {\n    setQuery(_query);\n    const lowercasedValue = _query.toLowerCase().trim();\n    if (lowercasedValue === '') {\n      return content;\n    }\n\n      const filteredData = content.filter(\n        (item) => Object.keys(item).some((key) => (excludeColumns.includes(key)\n          ? false\n          : item[key].toString().toLowerCase().includes(lowercasedValue))),\n      );\n      return filteredData;\n  }, [excludeColumns]);\n\n  // handle change event of search input\n  const handleChange = (value) => {\n    setQuery(value);\n    if (contentList2 !== undefined) {\n      onfilerRequest1(onQuery(value, contentList1));\n      onfilerRequest2(onQuery(value, contentList2));\n    } else {\n      onfilerRequest1(onQuery(value, contentList1));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Toolbar>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <Search />\n          </div>\n          <InputBase\n            placeholder=\"Searchâ€¦\"\n            id=\"search\"\n            label=\"Search\"\n            type=\"text\"\n            variant=\"outlined\"\n            fullWidth\n            autoComplete={undefined}\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n            inputProps={{\n              'aria-label': 'search',\n              'data-testid': 'searchfield',\n            }}\n            value={query}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        </div>\n      </Toolbar>\n    </div>\n  );\n}\n\nSearchForm.propTypes = {\n  /** Prefill the query search field. */\n  defaultQuery: PropTypes.string,\n  /** Array list of items  */\n  contentList1: PropTypes.array,\n  contentList2: PropTypes.array,\n  /** Array list to be filtered  */\n  filterList: PropTypes.array,\n  /** Function to propogate the returned repositories data array. */\n  onfilerRequest1: PropTypes.func,\n  onfilerRequest2: PropTypes.func,\n  /** Configuration required if paths are provided as URL. */\n};\n\nexport default SearchForm;\n"]},"metadata":{},"sourceType":"module"}