{"ast":null,"code":"var _jsxFileName = \"/home/asherphilip/Documents/autographa/renderer/src/components/ApplicationBar/CustomDialog.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { useStyles, DialogContent, DialogActions, Transition } from './useStyles';\n\nconst DialogTitle = props => {\n  const classes = useStyles();\n\n  const {\n    children,\n    onClose\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"onClose\"]);\n\n  return __jsx(MuiDialogTitle, _extends({\n    disableTypography: true,\n    className: classes.dialogTitle\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }), __jsx(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, children), onClose ? __jsx(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, __jsx(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  })) : null);\n};\n\nexport default function CustomDialog({\n  open,\n  setOpen,\n  title,\n  buttons,\n  content,\n  width\n}) {\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Dialog, {\n    maxWidth: width,\n    fullWidth: true,\n    onClose: handleClose,\n    TransitionComponent: Transition,\n    \"aria-labelledby\": \"customized-dialog-title\",\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(DialogTitle, {\n    id: \"customized-dialog-title\",\n    \"data-testid\": \"dialog-title\",\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, title), __jsx(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, content), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    \"data-testid\": \"dialog-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, buttons))));\n}\nDialogTitle.propTypes = {\n  /** State function to close dialog */\n  onClose: PropTypes.func,\n\n  /** Component to render inside of the custom dialog. */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n};\nCustomDialog.propTypes = {\n  /** The title string or jsx to be displayed. */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /** State which triggers dialog. */\n  open: PropTypes.bool.isRequired,\n\n  /** State setting function to trigger dialog */\n  setOpen: PropTypes.func,\n\n  /** Additional buttons to be displayed. */\n  buttons: PropTypes.element,\n\n  /** Component to render inside of the custom dialog. */\n  content: PropTypes.element,\n\n  /** Determines window size */\n  width: PropTypes.string\n};","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/ApplicationBar/CustomDialog.js"],"names":["React","PropTypes","Dialog","MuiDialogTitle","IconButton","CloseIcon","Typography","useStyles","DialogContent","DialogActions","Transition","DialogTitle","props","classes","children","onClose","other","dialogTitle","closeButton","CustomDialog","open","setOpen","title","buttons","content","width","handleClose","propTypes","func","oneOfType","string","element","bool","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  useStyles, DialogContent, DialogActions, Transition,\n} from './useStyles';\n\nconst DialogTitle = ((props) => {\n  const classes = useStyles();\n  const {\n    children, onClose, ...other\n  } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.dialogTitle} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nexport default function CustomDialog({\n  open,\n  setOpen,\n  title,\n  buttons,\n  content,\n  width,\n}) {\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        maxWidth={width}\n        fullWidth\n        onClose={handleClose}\n        TransitionComponent={Transition}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle\n          id=\"customized-dialog-title\"\n          data-testid=\"dialog-title\"\n          onClose={handleClose}\n        >\n          {title}\n        </DialogTitle>\n        <DialogContent dividers>\n          {content}\n        </DialogContent>\n        <DialogActions>\n          <span data-testid=\"dialog-buttons\">\n            {buttons}\n          </span>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nDialogTitle.propTypes = {\n  /** State function to close dialog */\n  onClose: PropTypes.func,\n  /** Component to render inside of the custom dialog. */\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n};\n\nCustomDialog.propTypes = {\n  /** The title string or jsx to be displayed. */\n  title: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  /** State which triggers dialog. */\n  open: PropTypes.bool.isRequired,\n  /** State setting function to trigger dialog */\n  setOpen: PropTypes.func,\n  /** Additional buttons to be displayed. */\n  buttons: PropTypes.element,\n  /** Component to render inside of the custom dialog. */\n  content: PropTypes.element,\n  /** Determines window size */\n  width: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}