{"ast":null,"code":"import _regeneratorRuntime from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as localForage from 'localforage';\nimport * as logger from '../logger';\n\nvar path = require('path');\n\nvar error;\n\nvar uniqueUser = function uniqueUser(users, email) {\n  return users.some(function (user) {\n    return user.email === email;\n  });\n};\n\nexport var loadUsers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fs) {\n    var file;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = path.join('Autogrpha-DB', 'DB.json');\n\n            if (fs.existsSync(file)) {\n              fs.readFile(file, 'utf8', function (err, data) {\n                if (err) {\n                  logger.error('handleJson.js', 'Failed to read the data from file');\n                } else {\n                  logger.debug('handleJson.js', 'Successfully read the data from file'); // Add users to localForage:\n\n                  localForage.setItem('users', JSON.parse(data), function (errLoc) {\n                    if (errLoc) {\n                      logger.error('handleJson.js', 'Failed to load users list to LocalStorage');\n                    }\n\n                    logger.debug('handleJson.js', 'Added users list to LocalStorage');\n                  });\n                }\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadUsers(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleJson = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, fs) {\n    var file, array;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            logger.debug('handleJson.js', 'Inside handleJson'); //   console.log('global', global.path);\n\n            fs.mkdirSync(path.join('Autogrpha-DB'), {\n              recursive: true\n            });\n            file = path.join('Autogrpha-DB', 'DB.json');\n            error = {\n              userExist: false,\n              fetchFile: false\n            };\n\n            if (!fs.existsSync(file)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              fs.readFile(file, 'utf8', function (err, data) {\n                if (err) {\n                  logger.error('handleJson.js', 'Failed to read the data from file');\n                  error.fetchFile = true;\n                  resolve(error);\n                } else {\n                  logger.debug('handleJson.js', 'Successfully read the data from file');\n                  var json = JSON.parse(data);\n\n                  if (uniqueUser(json, values.email)) {\n                    error.userExist = true;\n                    resolve(error);\n                  } else {\n                    json.push(values);\n\n                    try {\n                      fs.writeFileSync(file, JSON.stringify(json));\n                      logger.debug('handleJson.js', 'Successfully added new user to the existing list in file'); // Add new user to localForage:\n\n                      localForage.setItem('users', json, function (errLoc) {\n                        if (errLoc) {\n                          logger.error('handleJson.js', 'Failed to add new user to existing list');\n                        }\n\n                        logger.debug('handleJson.js', 'Added new user to existing list');\n                      });\n                      resolve(error);\n                    } catch (errCatch) {\n                      logger.error('handleJson.js', 'Failed to add new user to the file');\n                      resolve(error);\n                    }\n                  }\n                }\n              });\n            }));\n\n          case 6:\n            array = [];\n            array.push(values);\n            _context2.prev = 8;\n            fs.writeFileSync(file, JSON.stringify(array));\n            logger.debug('handleJson.js', 'Successfully created and written to the file'); // Add new user to localForage:\n\n            localForage.setItem('users', array, function (err) {\n              if (err) {\n                logger.error('handleJson.js', 'Failed to Create a file and add user to LocalForage');\n              }\n\n              logger.debug('handleJson.js', 'Created a file and added user to LocalForage');\n            });\n            logger.debug('handleJson.js', 'Exiting from handleJson');\n            return _context2.abrupt(\"return\", error);\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](8);\n            logger.error('handleJson.js', 'Failed to create and write to the file');\n            error.fetchFile = true;\n            return _context2.abrupt(\"return\", error);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 16]]);\n  }));\n\n  return function handleJson(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/core/handleJson.js"],"names":["localForage","logger","path","require","error","uniqueUser","users","email","some","user","loadUsers","fs","file","join","existsSync","readFile","err","data","debug","setItem","JSON","parse","errLoc","handleJson","values","mkdirSync","recursive","userExist","fetchFile","Promise","resolve","json","push","writeFileSync","stringify","errCatch","array"],"mappings":"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","sourcesContent":["import * as localForage from 'localforage';\nimport * as logger from '../logger';\n\nconst path = require('path');\n\nlet error;\nconst uniqueUser = (users, email) => users.some((user) => user.email === email);\n\nexport const loadUsers = async (fs) => {\n  const file = path.join('Autogrpha-DB', 'DB.json');\n  if (fs.existsSync(file)) {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to read the data from file');\n      } else {\n        logger.debug('handleJson.js', 'Successfully read the data from file');\n        // Add users to localForage:\n        localForage.setItem('users', JSON.parse(data), (errLoc) => {\n          if (errLoc) {\n            logger.error('handleJson.js', 'Failed to load users list to LocalStorage');\n          }\n          logger.debug('handleJson.js', 'Added users list to LocalStorage');\n        });\n      }\n    });\n  }\n};\n\nexport const handleJson = async (values, fs) => {\n  logger.debug('handleJson.js', 'Inside handleJson');\n  //   console.log('global', global.path);\n  fs.mkdirSync(path.join('Autogrpha-DB'), {\n    recursive: true,\n  });\n  const file = path.join('Autogrpha-DB', 'DB.json');\n  error = { userExist: false, fetchFile: false };\n  if (fs.existsSync(file)) {\n    return new Promise((resolve) => {\n      fs.readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          logger.error('handleJson.js', 'Failed to read the data from file');\n          error.fetchFile = true;\n          resolve(error);\n        } else {\n          logger.debug('handleJson.js', 'Successfully read the data from file');\n          const json = JSON.parse(data);\n          if (uniqueUser(json, values.email)) {\n            error.userExist = true;\n            resolve(error);\n          } else {\n            json.push(values);\n            try {\n              fs.writeFileSync(file, JSON.stringify(json));\n              logger.debug('handleJson.js', 'Successfully added new user to the existing list in file');\n              // Add new user to localForage:\n              localForage.setItem('users', json, (errLoc) => {\n                if (errLoc) {\n                  logger.error('handleJson.js', 'Failed to add new user to existing list');\n                }\n                logger.debug('handleJson.js', 'Added new user to existing list');\n              });\n              resolve(error);\n            } catch (errCatch) {\n              logger.error('handleJson.js', 'Failed to add new user to the file');\n              resolve(error);\n            }\n          }\n        }\n      });\n    });\n  }\n  const array = [];\n  array.push(values);\n  try {\n    fs.writeFileSync(file, JSON.stringify(array));\n    logger.debug('handleJson.js', 'Successfully created and written to the file');\n    // Add new user to localForage:\n    localForage.setItem('users', array, (err) => {\n      if (err) {\n        logger.error('handleJson.js', 'Failed to Create a file and add user to LocalForage');\n      }\n      logger.debug('handleJson.js', 'Created a file and added user to LocalForage');\n    });\n    logger.debug('handleJson.js', 'Exiting from handleJson');\n    return error;\n  } catch (err) {\n    logger.error('handleJson.js', 'Failed to create and write to the file');\n    error.fetchFile = true;\n    return error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}