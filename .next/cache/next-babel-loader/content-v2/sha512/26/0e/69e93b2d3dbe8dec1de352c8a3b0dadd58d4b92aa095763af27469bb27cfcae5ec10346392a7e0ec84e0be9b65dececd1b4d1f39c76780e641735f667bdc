{"ast":null,"code":"import _regeneratorRuntime from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/asherphilip/Documents/autographa/renderer/src/components/ProjectsPage/Profile/Profile.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport { Paper, Typography, IconButton, Grid, TextField, Box, OutlinedInput, FormControl, InputLabel, InputAdornment, Select, MenuItem, Input, Button } from '@material-ui/core';\nimport clsx from 'clsx';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Avatar from '@material-ui/core/Avatar';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { FormattedMessage } from 'react-intl';\nimport * as localForage from 'localforage';\nimport { usePrefs } from 'prefs-rcl';\nimport AutographaStore from '../../AutographaStore';\nimport * as logger from '../../../logger';\nimport { ProfileStyles } from '../useStyles/ProfileStyles';\nimport useValidator from '../../Validation/useValidator';\nimport { AutoCompleteSearch } from '../../AutoCompleteSearch/AutoCompleteSearch';\nvar localForageConfig = {\n  type: 'localForage',\n  name: 'profile1',\n  maxSize: '5MB'\n};\nvar region = [{\n  id: 1,\n  place: 'Delhi, India'\n}, {\n  id: 2,\n  place: 'Helsinki, Finland'\n}, {\n  id: 3,\n  place: 'New York, United States'\n}, {\n  id: 4,\n  place: 'Morocco, North Africa'\n}];\n\nvar Profile = function Profile() {\n  _s();\n\n  var classes = ProfileStyles();\n\n  var _React$useState = React.useState({\n    password: '',\n    showPassword: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      values = _React$useState2[0],\n      setValues = _React$useState2[1];\n\n  var _React$useState3 = React.useState(AutographaStore.appLang),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      appLang = _React$useState4[0],\n      setAppLang = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      avatarPathImport = _React$useState6[0],\n      setavatarPathImport = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      firstname = _React$useState8[0],\n      setFirstname = _React$useState8[1];\n\n  var _React$useState9 = React.useState(''),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      lastname = _React$useState10[0],\n      setLastname = _React$useState10[1];\n\n  var _React$useState11 = React.useState(''),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      email = _React$useState12[0],\n      setEmail = _React$useState12[1];\n\n  var _React$useState13 = React.useState(''),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      selregion = _React$useState14[0],\n      setRegion = _React$useState14[1];\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      saved = _React$useState16[0],\n      setSaved = _React$useState16[1];\n\n  var _useValidator = useValidator(),\n      _useValidator$state = _useValidator.state,\n      formValid = _useValidator$state.formValid,\n      errorCount = _useValidator$state.errorCount,\n      errors = _useValidator$state.errors,\n      _useValidator$action = _useValidator.action,\n      handleFields = _useValidator$action.handleFields,\n      handleSubmitFields = _useValidator$action.handleSubmitFields;\n\n  var _usePrefs = usePrefs({\n    backendfn: localForageConfig\n  }),\n      setItem = _usePrefs.action.setItem;\n\n  var handleChange = function handleChange(prop) {\n    return function (event) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, prop, event.target.value)));\n      handleFields(event);\n    };\n  };\n\n  var handleClickShowPassword = function handleClickShowPassword() {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      showPassword: !values.showPassword\n    }));\n  };\n\n  var handleMouseDownPassword = function handleMouseDownPassword(event) {\n    event.preventDefault();\n  };\n\n  var changeLangauge = function changeLangauge(event) {\n    setAppLang(event.target.value);\n  };\n\n  var openFileDialogAvatarData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n      var target, fileReader;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              target = _ref.target;\n              logger.debug('Profile.js', 'dialog opens to update avatar');\n\n              if (target.files[0] !== undefined) {\n                fileReader = new FileReader();\n                fileReader.readAsDataURL(target.files[0]);\n\n                fileReader.onload = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            localForage.setItem('avatarPath', e.target.result, function (err) {\n                              localForage.getItem('avatarPath', function (value) {\n                                setavatarPathImport(value);\n                                AutographaStore.avatarPath = value;\n                                logger.debug('Profile.js', 'updated avatar');\n\n                                if (err) {\n                                  logger.error('Profile.js', 'failed to update avatar');\n                                }\n                              });\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }();\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function openFileDialogAvatarData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var removeAvatar = function removeAvatar() {\n    logger.debug('Profile.js', 'event to remove avatar');\n    localForage.setItem('avatarPath', '', function (err) {\n      localForage.getItem('avatarPath', function (value) {\n        setavatarPathImport(value);\n        AutographaStore.avatarPath = value;\n\n        if (err) {\n          logger.error('Profile.js', 'error while removing avatar');\n        }\n      });\n\n      if (err) {\n        logger.error('Profile.js', 'error while removing avatar');\n      }\n    });\n  };\n\n  useEffect(function () {\n    localForage.getItem('avatarPath', function (err, value) {\n      setavatarPathImport(value);\n      AutographaStore.avatarPath = value;\n\n      if (err) {\n        logger.error('Profile.js', 'error in setting avatar on mount');\n      }\n    });\n  }, []);\n  useEffect(function () {\n    localForage.getItem('profileSettings', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(err, value) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (value) {\n                  value.forEach(function (fields) {\n                    setFirstname(fields.firstname);\n                    setLastname(fields.lastname);\n                    setEmail(fields.email);\n                    setRegion(fields.region);\n                    setValues(_objectSpread(_objectSpread({}, values), {}, {\n                      password: fields.password\n                    }));\n                    logger.debug('Profile.js', 'setting the saved profile values');\n                  });\n                }\n\n                if (err) {\n                  logger.error('Profile.js', 'error in getting saved values');\n                }\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()); // eslint-disable-next-line\n  }, []);\n\n  var handleSubmit = function handleSubmit(e) {\n    handleSubmitFields(e);\n    var profileSettings = [{\n      password: values.password,\n      firstname: firstname,\n      lastname: lastname,\n      region: selregion,\n      email: email,\n      appLang: appLang\n    }];\n\n    if (!saved) {\n      setSaved(profileSettings);\n    }\n\n    if (errorCount !== null && formValid) {\n      setItem({\n        key: 'profileSettings',\n        values: profileSettings,\n        tag: 'projectspage'\n      }); // localForage.setItem('profileSettings', profileSettings, () => {\n      //   localForage.getItem('profileSettings', (err, value) => {\n      //     setSaved(value);\n      //     logger.debug('Profile.js', 'Profile fields saved successfully');\n      //     if (err) {\n      //       logger.error('Profile.js', 'Failed in saving field values');\n      //     }\n      //   });\n      // });\n\n      localForage.getItem('applang', function (err) {\n        localForage.setItem('applang', appLang, function () {\n          if (err) {\n            logger.error('Profile.js', 'Failed to change language');\n          }\n\n          logger.debug('Profile.js', 'Language changed app reloads');\n          window.location.reload();\n        });\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Paper, {\n    \"data-test\": \"component-profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }), __jsx(Grid, {\n    item: true,\n    xs: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, __jsx(Avatar, {\n    src: avatarPathImport,\n    alt: \"Remy Sharp\",\n    className: classes.avatarlarge,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: classes.avataredits,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, __jsx(IconButton, {\n    variant: \"contained\",\n    component: \"label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, __jsx(EditIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }), __jsx(Input, {\n    type: \"file\",\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    onChange: openFileDialogAvatarData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  })), __jsx(IconButton, {\n    \"aria-label\": \"delete\",\n    onClick: removeAvatar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }, __jsx(DeleteForeverIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, __jsx(\"form\", {\n    className: classes.personalinfo,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    color: \"inherit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontWeight: 600,\n    m: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"label-personal-information\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 19\n    }\n  }))), __jsx(FormattedMessage, {\n    id: \"label-first-name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, function (message) {\n    return __jsx(TextField // error={errors.namefield === \"\" ? false : true}\n    , {\n      className: classes.textfieldsmall,\n      label: message,\n      name: \"namefield\",\n      variant: \"outlined\",\n      type: \"text\",\n      inputProps: {\n        'data-testid': 'firstnamefield'\n      },\n      value: firstname,\n      helperText: errors.namefield,\n      onChange: function onChange(e) {\n        setFirstname(e.target.value);\n        handleFields(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 19\n      }\n    });\n  }), __jsx(FormattedMessage, {\n    id: \"label-last-name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }, function (message) {\n    return __jsx(TextField, {\n      className: classes.textfieldsmall,\n      label: message,\n      name: \"lastname\",\n      variant: \"outlined\",\n      inputProps: {\n        'data-testid': 'lastnamefield'\n      },\n      value: lastname,\n      helperText: errors.lastname,\n      onChange: function onChange(e) {\n        setLastname(e.target.value);\n        handleFields(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 19\n      }\n    });\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"label-email\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }, function (message) {\n    return __jsx(TextField, {\n      className: classes.textfieldlong,\n      label: message,\n      name: \"email\",\n      variant: \"outlined\",\n      inputProps: {\n        'data-testid': 'emailfield'\n      },\n      value: email,\n      helperText: errors.email,\n      onChange: function onChange(e) {\n        setEmail(e.target.value);\n        handleFields(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }\n    });\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 15\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    className: classes.textfieldlong,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  }, __jsx(AutoCompleteSearch, {\n    id: \"Region\",\n    listarray: region,\n    customPlaceholder: \"Region\",\n    selectedValue: selregion,\n    setSelectedValue: setRegion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 19\n    }\n  }))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 15\n    }\n  }, __jsx(FormControl, {\n    className: (clsx(classes.margin, classes.textField), classes.textfieldlong),\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"outlined-adornment-password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"label-password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  })), __jsx(OutlinedInput, {\n    id: \"outlined-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    value: values.password,\n    name: \"password\",\n    onChange: handleChange('password'),\n    inputProps: {\n      'data-testid': 'passwordbox'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 23\n      }\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 25\n      }\n    }, values.showPassword ? __jsx(Visibility, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 29\n      }\n    }) : __jsx(VisibilityOff, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 29\n      }\n    }))),\n    labelWidth: 70,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 19\n    }\n  }), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 19\n    }\n  }, errors.password))), __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    color: \"inherit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontWeight: 600,\n    m: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"label-language\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 19\n    }\n  }))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 15\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    className: classes.textfieldlong,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    className: classes.formControl,\n    id: \"localeList\",\n    value: appLang,\n    onChange: changeLangauge,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 19\n    }\n  }, __jsx(MenuItem, {\n    value: \"en\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 21\n    }\n  }, \"English\"), __jsx(MenuItem, {\n    value: \"hi\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 21\n    }\n  }, \"Hindi\")))), __jsx(Button, {\n    className: classes.save,\n    variant: \"contained\",\n    color: \"primary\",\n    \"data-testid\": \"submit-button\",\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 15\n    }\n  }, \"Save\"))))));\n};\n\n_s(Profile, \"nyp/IEBax8HCMsylb/JCWUKrC24=\", false, function () {\n  return [useValidator, usePrefs];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/ProjectsPage/Profile/Profile.js"],"names":["React","useEffect","Paper","Typography","IconButton","Grid","TextField","Box","OutlinedInput","FormControl","InputLabel","InputAdornment","Select","MenuItem","Input","Button","clsx","Visibility","VisibilityOff","Avatar","EditIcon","DeleteForeverIcon","FormattedMessage","localForage","usePrefs","AutographaStore","logger","ProfileStyles","useValidator","AutoCompleteSearch","localForageConfig","type","name","maxSize","region","id","place","Profile","classes","useState","password","showPassword","values","setValues","appLang","setAppLang","avatarPathImport","setavatarPathImport","firstname","setFirstname","lastname","setLastname","email","setEmail","selregion","setRegion","saved","setSaved","state","formValid","errorCount","errors","action","handleFields","handleSubmitFields","backendfn","setItem","handleChange","prop","event","target","value","handleClickShowPassword","handleMouseDownPassword","preventDefault","changeLangauge","openFileDialogAvatarData","debug","files","undefined","fileReader","FileReader","readAsDataURL","onload","e","result","err","getItem","avatarPath","error","removeAvatar","forEach","fields","handleSubmit","profileSettings","key","tag","window","location","reload","avatarlarge","avataredits","display","personalinfo","title","message","textfieldsmall","namefield","textfieldlong","margin","textField","formControl","save"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Paper,\n  Typography,\n  IconButton,\n  Grid,\n  TextField,\n  Box,\n  OutlinedInput,\n  FormControl,\n  InputLabel,\n  InputAdornment,\n  Select,\n  MenuItem,\n  Input,\n  Button,\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Avatar from '@material-ui/core/Avatar';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { FormattedMessage } from 'react-intl';\nimport * as localForage from 'localforage';\nimport { usePrefs } from 'prefs-rcl';\nimport AutographaStore from '../../AutographaStore';\nimport * as logger from '../../../logger';\nimport { ProfileStyles } from '../useStyles/ProfileStyles';\nimport useValidator from '../../Validation/useValidator';\nimport { AutoCompleteSearch } from '../../AutoCompleteSearch/AutoCompleteSearch';\n\nconst localForageConfig = {\n  type: 'localForage',\n  name: 'profile1',\n  maxSize: '5MB',\n};\nconst region = [\n  { id: 1, place: 'Delhi, India' },\n  { id: 2, place: 'Helsinki, Finland' },\n  { id: 3, place: 'New York, United States' },\n  { id: 4, place: 'Morocco, North Africa' },\n];\n\nconst Profile = () => {\n  const classes = ProfileStyles();\n  const [values, setValues] = React.useState({\n    password: '',\n    showPassword: false,\n  });\n  const [appLang, setAppLang] = React.useState(AutographaStore.appLang);\n  const [avatarPathImport, setavatarPathImport] = React.useState('');\n  const [firstname, setFirstname] = React.useState('');\n  const [lastname, setLastname] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [selregion, setRegion] = React.useState('');\n  const [saved, setSaved] = React.useState('');\n  const {\n    state: {\n      formValid,\n      errorCount,\n      errors,\n    },\n    action: {\n      handleFields,\n      handleSubmitFields,\n    },\n\n  } = useValidator();\n\n  const {\n    action: {\n      // readItem,\n      setItem,\n      // deleteItem,\n      // custom,\n    },\n  } = usePrefs({\n    backendfn: localForageConfig,\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n    handleFields(event);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const changeLangauge = (event) => {\n    setAppLang(event.target.value);\n  };\n\n  const openFileDialogAvatarData = async ({ target }) => {\n    logger.debug('Profile.js', 'dialog opens to update avatar');\n    if (target.files[0] !== undefined) {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(target.files[0]);\n      fileReader.onload = async (e) => {\n        localForage.setItem('avatarPath', e.target.result, (err) => {\n          localForage.getItem('avatarPath', (value) => {\n            setavatarPathImport(value);\n            AutographaStore.avatarPath = value;\n            logger.debug('Profile.js', 'updated avatar');\n            if (err) {\n              logger.error('Profile.js', 'failed to update avatar');\n            }\n          });\n        });\n      };\n    }\n  };\n\n  const removeAvatar = () => {\n    logger.debug('Profile.js', 'event to remove avatar');\n    localForage.setItem('avatarPath', '', (err) => {\n      localForage.getItem('avatarPath', (value) => {\n        setavatarPathImport(value);\n        AutographaStore.avatarPath = value;\n        if (err) {\n          logger.error('Profile.js', 'error while removing avatar');\n        }\n      });\n      if (err) {\n        logger.error('Profile.js', 'error while removing avatar');\n      }\n    });\n  };\n\n  useEffect(() => {\n    localForage.getItem('avatarPath', (err, value) => {\n      setavatarPathImport(value);\n      AutographaStore.avatarPath = value;\n      if (err) {\n        logger.error('Profile.js', 'error in setting avatar on mount');\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    localForage.getItem('profileSettings', async (err, value) => {\n      if (value) {\n        value.forEach((fields) => {\n          setFirstname(fields.firstname);\n          setLastname(fields.lastname);\n          setEmail(fields.email);\n          setRegion(fields.region);\n          setValues({ ...values, password: fields.password });\n          logger.debug('Profile.js', 'setting the saved profile values');\n        });\n      }\n      if (err) {\n        logger.error('Profile.js', 'error in getting saved values');\n      }\n    });\n    // eslint-disable-next-line\n  },[])\n\n  const handleSubmit = (e) => {\n    handleSubmitFields(e);\n    const profileSettings = [\n      {\n        password: values.password,\n        firstname,\n        lastname,\n        region: selregion,\n        email,\n        appLang,\n      },\n    ];\n    if (!saved) { setSaved(profileSettings); }\n    if (errorCount !== null && formValid) {\n      setItem({\n        key: 'profileSettings',\n        values: profileSettings,\n        tag: 'projectspage',\n      });\n      // localForage.setItem('profileSettings', profileSettings, () => {\n      //   localForage.getItem('profileSettings', (err, value) => {\n      //     setSaved(value);\n      //     logger.debug('Profile.js', 'Profile fields saved successfully');\n      //     if (err) {\n      //       logger.error('Profile.js', 'Failed in saving field values');\n      //     }\n      //   });\n      // });\n      localForage.getItem('applang', (err) => {\n        localForage.setItem('applang', appLang, () => {\n          if (err) {\n            logger.error('Profile.js', 'Failed to change language');\n          }\n          logger.debug('Profile.js', 'Language changed app reloads');\n          window.location.reload();\n        });\n      });\n    }\n  };\n\n  return (\n    <>\n      <Paper data-test=\"component-profile\">\n        <Grid container spacing={3}>\n          <Grid item xs={2} />\n          <Grid item xs>\n            <Avatar\n              src={avatarPathImport}\n              alt=\"Remy Sharp\"\n              className={classes.avatarlarge}\n            />\n            <div className={classes.avataredits}>\n              <IconButton variant=\"contained\" component=\"label\">\n                <EditIcon />\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  style={{ display: 'none' }}\n                  onChange={openFileDialogAvatarData}\n                />\n              </IconButton>\n              <IconButton aria-label=\"delete\" onClick={removeAvatar}>\n                <DeleteForeverIcon />\n              </IconButton>\n            </div>\n          </Grid>\n          <Grid item xs={7}>\n            <form\n              className={classes.personalinfo}\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={(e) => handleSubmit(e)}\n            >\n              <Typography\n                className={classes.title}\n                variant=\"h6\"\n                color=\"inherit\"\n              >\n                <Box fontWeight={600} m={1}>\n                  <FormattedMessage id=\"label-personal-information\" />\n                </Box>\n              </Typography>\n              <FormattedMessage id=\"label-first-name\">\n                {(message) => (\n                  <TextField\n                    // error={errors.namefield === \"\" ? false : true}\n                    className={classes.textfieldsmall}\n                    label={message}\n                    name=\"namefield\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                    inputProps={{\n                      'data-testid': 'firstnamefield',\n                    }}\n                    value={firstname}\n                    helperText={errors.namefield}\n                    onChange={(e) => {\n                      setFirstname(e.target.value);\n                      handleFields(e);\n                    }}\n                  />\n                )}\n              </FormattedMessage>\n              <FormattedMessage id=\"label-last-name\">\n                {(message) => (\n                  <TextField\n                    className={classes.textfieldsmall}\n                    label={message}\n                    name=\"lastname\"\n                    variant=\"outlined\"\n                    inputProps={{\n                      'data-testid': 'lastnamefield',\n                    }}\n                    value={lastname}\n                    helperText={errors.lastname}\n                    onChange={(e) => {\n                      setLastname(e.target.value);\n                      handleFields(e);\n                    }}\n                  />\n                )}\n              </FormattedMessage>\n              <div>\n                <FormattedMessage id=\"label-email\">\n                  {(message) => (\n                    <TextField\n                      className={classes.textfieldlong}\n                      label={message}\n                      name=\"email\"\n                      variant=\"outlined\"\n                      inputProps={{\n                        'data-testid': 'emailfield',\n                      }}\n                      value={email}\n                      helperText={errors.email}\n                      onChange={(e) => {\n                        setEmail(e.target.value);\n                        handleFields(e);\n                      }}\n                    />\n                  )}\n                </FormattedMessage>\n              </div>\n              <div>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.textfieldlong}\n                >\n                  <AutoCompleteSearch\n                    id=\"Region\"\n                    listarray={region}\n                    customPlaceholder=\"Region\"\n                    selectedValue={selregion}\n                    setSelectedValue={setRegion}\n                  />\n                </FormControl>\n              </div>\n              <div>\n                <FormControl\n                  className={\n                    (clsx(classes.margin, classes.textField),\n                    classes.textfieldlong)\n                  }\n                  variant=\"outlined\"\n                >\n                  <InputLabel htmlFor=\"outlined-adornment-password\">\n                    <FormattedMessage id=\"label-password\" />\n                  </InputLabel>\n                  <OutlinedInput\n                    id=\"outlined-adornment-password\"\n                    type={values.showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    onChange={handleChange('password')}\n                    inputProps={{\n                      'data-testid': 'passwordbox',\n                    }}\n                    endAdornment={(\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                        >\n                          {values.showPassword ? (\n                            <Visibility />\n                          ) : (\n                            <VisibilityOff />\n                          )}\n                        </IconButton>\n                      </InputAdornment>\n                    )}\n                    labelWidth={70}\n                  />\n                  <span>{errors.password}</span>\n                </FormControl>\n              </div>\n              <Typography\n                className={classes.title}\n                variant=\"h6\"\n                color=\"inherit\"\n              >\n                <Box fontWeight={600} m={2}>\n                  <FormattedMessage id=\"label-language\" />\n                </Box>\n              </Typography>\n              <div>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.textfieldlong}\n                >\n                  <Select\n                    className={classes.formControl}\n                    id=\"localeList\"\n                    value={appLang}\n                    onChange={changeLangauge}\n                  >\n                    <MenuItem value=\"en\">English</MenuItem>\n                    <MenuItem value=\"hi\">Hindi</MenuItem>\n                  </Select>\n                </FormControl>\n              </div>\n              <Button\n                className={classes.save}\n                variant=\"contained\"\n                color=\"primary\"\n                data-testid=\"submit-button\"\n                type=\"submit\"\n              >\n                Save\n              </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n};\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}