{"ast":null,"code":"import * as logger from '../logger';\n\nvar crypto = require('crypto'); //  generates random string of characters i.e salt\n\n\nvar randomString = function randomString(length) {\n  logger.debug('hashing.js', 'Generating salt in randomString');\n  return crypto.randomBytes(Math.ceil(length / 2)).toString('hex')\n  /** convert to hexadecimal format */\n  .slice(0, length);\n  /** return required number of characters */\n}; //  Hash using algorithm sha512 and salt\n\n\nexport var hash = function hash(password, salt) {\n  logger.debug('hashing.js', 'Inside hash');\n  var hashed = crypto.createHmac('sha512', salt);\n  hashed.update(password);\n  var value = hashed.digest('hex');\n  logger.debug('hashing.js', 'Exiting from hash after hanshing the password');\n  return {\n    salt: salt,\n    password: value\n  };\n};\nexport var HashPassword = function HashPassword(userPassword) {\n  logger.debug('hashing.js', 'Inside HashPassword'); // Generate salt of length 16\n\n  var salt = randomString(16);\n  var passwordData = hash(userPassword, salt);\n  logger.debug('hashing.js', 'Exiting from HashPassword');\n  return passwordData;\n};\n_c = HashPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"HashPassword\");","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/core/hashing.js"],"names":["logger","crypto","require","randomString","length","debug","randomBytes","Math","ceil","toString","slice","hash","password","salt","hashed","createHmac","update","value","digest","HashPassword","userPassword","passwordData"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,WAAxB;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/BJ,EAAAA,MAAM,CAACK,KAAP,CAAa,YAAb,EAA2B,iCAA3B;AACA,SAAOJ,MAAM,CACVK,WADI,CACQC,IAAI,CAACC,IAAL,CAAUJ,MAAM,GAAG,CAAnB,CADR,EAEJK,QAFI,CAEK,KAFL;AAEY;AAFZ,GAGJC,KAHI,CAGE,CAHF,EAGKN,MAHL,CAAP;AAGqB;AACtB,CAND,C,CAQA;;;AACA,OAAO,IAAMO,IAAI,GAAG,SAAPA,IAAO,CAACC,QAAD,EAAWC,IAAX,EAAoB;AACtCb,EAAAA,MAAM,CAACK,KAAP,CAAa,YAAb,EAA2B,aAA3B;AACA,MAAMS,MAAM,GAAGb,MAAM,CAACc,UAAP,CAAkB,QAAlB,EAA4BF,IAA5B,CAAf;AACAC,EAAAA,MAAM,CAACE,MAAP,CAAcJ,QAAd;AACA,MAAMK,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAc,KAAd,CAAd;AACAlB,EAAAA,MAAM,CAACK,KAAP,CAAa,YAAb,EAA2B,+CAA3B;AACA,SAAO;AACLQ,IAAAA,IAAI,EAAJA,IADK;AAELD,IAAAA,QAAQ,EAAEK;AAFL,GAAP;AAID,CAVM;AAYP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAAkB;AAC5CpB,EAAAA,MAAM,CAACK,KAAP,CAAa,YAAb,EAA2B,qBAA3B,EAD4C,CAE5C;;AACA,MAAMQ,IAAI,GAAGV,YAAY,CAAC,EAAD,CAAzB;AACA,MAAMkB,YAAY,GAAGV,IAAI,CAACS,YAAD,EAAeP,IAAf,CAAzB;AACAb,EAAAA,MAAM,CAACK,KAAP,CAAa,YAAb,EAA2B,2BAA3B;AACA,SAAOgB,YAAP;AACD,CAPM;KAAMF,Y","sourcesContent":["import * as logger from '../logger';\n\nconst crypto = require('crypto');\n\n//  generates random string of characters i.e salt\nconst randomString = (length) => {\n  logger.debug('hashing.js', 'Generating salt in randomString');\n  return crypto\n    .randomBytes(Math.ceil(length / 2))\n    .toString('hex') /** convert to hexadecimal format */\n    .slice(0, length); /** return required number of characters */\n};\n\n//  Hash using algorithm sha512 and salt\nexport const hash = (password, salt) => {\n  logger.debug('hashing.js', 'Inside hash');\n  const hashed = crypto.createHmac('sha512', salt);\n  hashed.update(password);\n  const value = hashed.digest('hex');\n  logger.debug('hashing.js', 'Exiting from hash after hanshing the password');\n  return {\n    salt,\n    password: value,\n  };\n};\n\nexport const HashPassword = (userPassword) => {\n  logger.debug('hashing.js', 'Inside HashPassword');\n  // Generate salt of length 16\n  const salt = randomString(16);\n  const passwordData = hash(userPassword, salt);\n  logger.debug('hashing.js', 'Exiting from HashPassword');\n  return passwordData;\n};\n"]},"metadata":{},"sourceType":"module"}