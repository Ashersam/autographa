{"ast":null,"code":"import _slicedToArray from \"/home/asherphilip/Documents/autographa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from 'react';\nimport { countErrors, validateForm, validEmailRegex } from './helper';\nexport default function useValidator() {\n  _s();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formValid = _React$useState2[0],\n      setFormValid = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      errorCount = _React$useState4[0],\n      setErrorCount = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    namefield: '',\n    lastname: '',\n    password: '',\n    email: ''\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      errors = _React$useState6[0],\n      setErrors = _React$useState6[1];\n\n  var handleFields = function handleFields(event) {\n    event.preventDefault();\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n\n    switch (name) {\n      case 'name':\n        errors.namefield = value.length < 5 ? 'Full Name must be 5 characters long!' : '';\n        break;\n\n      case 'email':\n        errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\n        break;\n\n      case 'password':\n        errors.password = value.length < 8 ? 'Password must be 8 characters long!' : '';\n        break;\n\n      default:\n        break;\n    }\n\n    setErrors(errors);\n  };\n\n  var handleSubmitFields = function handleSubmitFields(event) {\n    event.preventDefault();\n    setFormValid(validateForm(errors));\n    setErrorCount(countErrors(errors));\n  };\n\n  return {\n    state: {\n      formValid: formValid,\n      errorCount: errorCount,\n      errors: errors\n    },\n    action: {\n      setFormValid: setFormValid,\n      setErrorCount: setErrorCount,\n      setErrors: setErrors,\n      handleFields: handleFields,\n      handleSubmitFields: handleSubmitFields\n    }\n  };\n}\n\n_s(useValidator, \"on0qRg019nikPt/C5+xMZWOpFvk=\");","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/Validation/useValidator.js"],"names":["React","countErrors","validateForm","validEmailRegex","useValidator","useState","formValid","setFormValid","errorCount","setErrorCount","namefield","lastname","password","email","errors","setErrors","handleFields","event","preventDefault","target","name","value","length","test","handleSubmitFields","state","action"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,eAApC,QAA2D,UAA3D;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAAA,wBACHJ,KAAK,CAACK,QAAN,CAAe,KAAf,CADG;AAAA;AAAA,MAC9BC,SAD8B;AAAA,MACnBC,YADmB;;AAAA,yBAEDP,KAAK,CAACK,QAAN,CAAe,IAAf,CAFC;AAAA;AAAA,MAE9BG,UAF8B;AAAA,MAElBC,aAFkB;;AAAA,yBAGTT,KAAK,CAACK,QAAN,CAAe;AACzCK,IAAAA,SAAS,EAAE,EAD8B;AAEzCC,IAAAA,QAAQ,EAAE,EAF+B;AAGzCC,IAAAA,QAAQ,EAAE,EAH+B;AAIzCC,IAAAA,KAAK,EAAE;AAJkC,GAAf,CAHS;AAAA;AAAA,MAG9BC,MAH8B;AAAA,MAGtBC,SAHsB;;AAUrC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AAD8B,wBAEND,KAAK,CAACE,MAFA;AAAA,QAEtBC,IAFsB,iBAEtBA,IAFsB;AAAA,QAEhBC,KAFgB,iBAEhBA,KAFgB;;AAI9B,YAAQD,IAAR;AACE,WAAK,MAAL;AACEN,QAAAA,MAAM,CAACJ,SAAP,GAAmBW,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmB,sCAAnB,GAA4D,EAA/E;AACA;;AACF,WAAK,OAAL;AACER,QAAAA,MAAM,CAACD,KAAP,GAAeV,eAAe,CAACoB,IAAhB,CAAqBF,KAArB,IAA8B,EAA9B,GAAmC,qBAAlD;AACA;;AACF,WAAK,UAAL;AACEP,QAAAA,MAAM,CAACF,QAAP,GAAkBS,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmB,qCAAnB,GAA2D,EAA7E;AACA;;AACF;AACE;AAXJ;;AAaAP,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAlBD;;AAoBA,MAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,KAAD,EAAW;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACAX,IAAAA,YAAY,CAACL,YAAY,CAACY,MAAD,CAAb,CAAZ;AACAL,IAAAA,aAAa,CAACR,WAAW,CAACa,MAAD,CAAZ,CAAb;AACD,GAJD;;AAMA,SAAO;AACLW,IAAAA,KAAK,EAAE;AACLnB,MAAAA,SAAS,EAATA,SADK;AAELE,MAAAA,UAAU,EAAVA,UAFK;AAGLM,MAAAA,MAAM,EAANA;AAHK,KADF;AAMLY,IAAAA,MAAM,EAAE;AACNnB,MAAAA,YAAY,EAAZA,YADM;AAENE,MAAAA,aAAa,EAAbA,aAFM;AAGNM,MAAAA,SAAS,EAATA,SAHM;AAINC,MAAAA,YAAY,EAAZA,YAJM;AAKNQ,MAAAA,kBAAkB,EAAlBA;AALM;AANH,GAAP;AAcD;;GAlDuBpB,Y","sourcesContent":["import React from 'react';\nimport { countErrors, validateForm, validEmailRegex } from './helper';\n\nexport default function useValidator() {\n  const [formValid, setFormValid] = React.useState(false);\n  const [errorCount, setErrorCount] = React.useState(null);\n  const [errors, setErrors] = React.useState({\n    namefield: '',\n    lastname: '',\n    password: '',\n    email: '',\n  });\n\n  const handleFields = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        errors.namefield = value.length < 5 ? 'Full Name must be 5 characters long!' : '';\n        break;\n      case 'email':\n        errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\n        break;\n      case 'password':\n        errors.password = value.length < 8 ? 'Password must be 8 characters long!' : '';\n        break;\n      default:\n        break;\n    }\n    setErrors(errors);\n  };\n\n  const handleSubmitFields = (event) => {\n    event.preventDefault();\n    setFormValid(validateForm(errors));\n    setErrorCount(countErrors(errors));\n  };\n\n  return {\n    state: {\n      formValid,\n      errorCount,\n      errors,\n    },\n    action: {\n      setFormValid,\n      setErrorCount,\n      setErrors,\n      handleFields,\n      handleSubmitFields,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}