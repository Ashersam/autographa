{"ast":null,"code":"import * as localForage from 'localforage';\nimport React from 'react';\nimport { Configuration, PublicApi } from '@ory/kratos-client';\nimport * as logger from '../../logger';\nimport { isElectron } from '../../core/handleElectron';\n\nconst jwt = require('jsonwebtoken');\n\nconst kratos = new PublicApi(new Configuration({\n  basePath: 'http://127.0.0.1:4433/'\n}));\n\nfunction useAuthentication() {\n  const [accessToken, setaccessToken] = React.useState();\n  const [currentUser, setCurrentUser] = React.useState();\n  const [config, setConfig] = React.useState();\n\n  const getToken = () => {\n    logger.debug('useAuthentication.js', 'In getToken to check any token stored in localStorage');\n    localForage.getItem('sessionToken').then(value => {\n      setaccessToken(value);\n    });\n  };\n\n  const handleUser = () => {\n    logger.debug('useAuthentication.js', 'In handleUser to retrieve the user from the Token');\n    jwt.verify(accessToken, 'agv2', (err, decoded) => {\n      localForage.getItem('users').then(user => {\n        const obj = user.find(u => u.email === decoded.sessionData.user);\n        setCurrentUser(obj);\n      });\n    });\n  };\n\n  const generateToken = user => {\n    logger.debug('useAuthentication.js', 'In generateToken to generate a Token for the loggedIn user');\n    const sessionData = {\n      user: user.email,\n      loggedAt: Date(),\n      active: true,\n      remember: true\n    }; // console.log(process.env.REACT_APP_AG_JWT)\n\n    const token = jwt.sign({\n      sessionData\n    }, 'agv2');\n\n    if (token) {\n      localForage.setItem('sessionToken', token);\n      setaccessToken(token);\n    }\n  };\n\n  const logout = () => {\n    setaccessToken();\n    setCurrentUser();\n    localForage.removeItem('sessionToken');\n  };\n\n  const getConfig = flowId => {\n    kratos.getSelfServiceLoginFlow(flowId).then(({\n      data: flow\n    }) => {\n      var _flow$methods, _flow$methods$passwor;\n\n      setConfig(flow === null || flow === void 0 ? void 0 : (_flow$methods = flow.methods) === null || _flow$methods === void 0 ? void 0 : (_flow$methods$passwor = _flow$methods.password) === null || _flow$methods$passwor === void 0 ? void 0 : _flow$methods$passwor.config);\n    });\n  };\n\n  React.useEffect(() => {\n    if (isElectron()) {\n      kratos.initializeSelfServiceLoginViaAPIFlow().then(({\n        data: flow\n      }) => {\n        getConfig(flow.id);\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    if (accessToken && !currentUser) {\n      handleUser();\n    }\n  });\n  const response = {\n    state: {\n      accessToken,\n      currentUser,\n      config\n    },\n    actions: {\n      getToken,\n      generateToken,\n      logout,\n      getConfig\n    }\n  };\n  return response;\n}\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/asherphilip/Documents/autographa/renderer/src/components/Login/useAuthentication.js"],"names":["localForage","React","Configuration","PublicApi","logger","isElectron","jwt","require","kratos","basePath","useAuthentication","accessToken","setaccessToken","useState","currentUser","setCurrentUser","config","setConfig","getToken","debug","getItem","then","value","handleUser","verify","err","decoded","user","obj","find","u","email","sessionData","generateToken","loggedAt","Date","active","remember","token","sign","setItem","logout","removeItem","getConfig","flowId","getSelfServiceLoginFlow","data","flow","methods","password","useEffect","initializeSelfServiceLoginViaAPIFlow","id","response","state","actions"],"mappings":"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","sourcesContent":["import * as localForage from 'localforage';\nimport React from 'react';\nimport { Configuration, PublicApi } from '@ory/kratos-client';\nimport * as logger from '../../logger';\nimport { isElectron } from '../../core/handleElectron';\n\nconst jwt = require('jsonwebtoken');\n\nconst kratos = new PublicApi(new Configuration({ basePath: 'http://127.0.0.1:4433/' }));\n\nfunction useAuthentication() {\n  const [accessToken, setaccessToken] = React.useState();\n  const [currentUser, setCurrentUser] = React.useState();\n  const [config, setConfig] = React.useState();\n  const getToken = () => {\n    logger.debug('useAuthentication.js', 'In getToken to check any token stored in localStorage');\n    localForage.getItem('sessionToken').then((value) => {\n      setaccessToken(value);\n    });\n  };\n  const handleUser = () => {\n    logger.debug('useAuthentication.js', 'In handleUser to retrieve the user from the Token');\n    jwt.verify(accessToken, 'agv2', (err, decoded) => {\n      localForage.getItem('users').then((user) => {\n        const obj = user.find(\n          (u) => u.email === decoded.sessionData.user,\n        );\n        setCurrentUser(obj);\n      });\n    });\n  };\n  const generateToken = (user) => {\n    logger.debug('useAuthentication.js', 'In generateToken to generate a Token for the loggedIn user');\n    const sessionData = {\n      user: user.email,\n      loggedAt: Date(),\n      active: true,\n      remember: true,\n    };\n    // console.log(process.env.REACT_APP_AG_JWT)\n    const token = jwt.sign({ sessionData }, 'agv2');\n    if (token) {\n      localForage.setItem('sessionToken', token);\n      setaccessToken(token);\n    }\n  };\n  const logout = () => {\n    setaccessToken();\n    setCurrentUser();\n    localForage.removeItem('sessionToken');\n  };\n  const getConfig = (flowId) => {\n    kratos.getSelfServiceLoginFlow(flowId)\n      .then(({ data: flow }) => {\n        setConfig(flow?.methods?.password?.config);\n      });\n  };\n  React.useEffect(() => {\n    if (isElectron()) {\n      kratos.initializeSelfServiceLoginViaAPIFlow().then(({ data: flow }) => {\n        getConfig(flow.id);\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    if (accessToken && !currentUser) {\n      handleUser();\n    }\n  });\n  const response = {\n    state: { accessToken, currentUser, config },\n    actions: {\n      getToken, generateToken, logout, getConfig,\n    },\n  };\n  return response;\n}\nexport default useAuthentication;\n"]},"metadata":{},"sourceType":"module"}